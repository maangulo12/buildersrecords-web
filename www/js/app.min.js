!function(){"use strict";angular.module("app",["ngMessages","ui.validate","ui.router","angular-jwt","angular-storage","smart-table","app.directive.email-availability","app.directive.format","app.directive.page-select","app.directive.username-availability","app.service.auth","app.service.category","app.service.chart","app.service.draw","app.service.expenditure","app.service.fund","app.service.item","app.service.project","app.service.stripe","app.service.subcontractor","app.service.user","app.service.utility","app.home","app.login","app.signup","app.tutorial","app.projects","app.projects.overview","app.projects.cost","app.projects.funds","app.projects.expenditures","app.projects.subcontractors","app.account"])}(),function(){"use strict";function configurationBlock($urlRouterProvider,$locationProvider,jwtInterceptorProvider,$httpProvider){$urlRouterProvider.otherwise("/"),$locationProvider.html5Mode(!0),jwtInterceptorProvider.tokenGetter=function(store){return store.get("jwt")},$httpProvider.interceptors.push("jwtInterceptor")}angular.module("app").config(configurationBlock),configurationBlock.$inject=["$urlRouterProvider","$locationProvider","jwtInterceptorProvider","$httpProvider"]}(),function(){"use strict";angular.module("app").constant("API_URL","https://buildersrecords-api-staging.herokuapp.com")}(),function(){"use strict";function runBlock($rootScope,$state,store,jwtHelper){function stateChangeStart(event,toState){if(toState.data&&toState.data.requiresLogin){var token=store.get("jwt");token&&!jwtHelper.isTokenExpired(token)||(event.preventDefault(),$state.go("login"))}}$rootScope.$on("$stateChangeStart",stateChangeStart)}angular.module("app").run(runBlock),runBlock.$inject=["$rootScope","$state","store","jwtHelper"]}(),function(){"use strict";angular.module("app.account",[])}(),function(){"use strict";angular.module("app.account.billing",[])}(),function(){"use strict";angular.module("app.projects.cost",["ngMessages","ui.router","angular-storage","smart-table","app.directive.format","app.service.category","app.service.expenditure","app.service.item"])}(),function(){"use strict";angular.module("app.projects.expenditures",["ngMessages","ui.router","angular-storage","smart-table","app.directive.format","app.directive.page-select","app.service.expenditure","app.service.fund","app.service.item","app.service.subcontractor"])}(),function(){"use strict";angular.module("app.projects.funds",["ngMessages","ui.router","angular-storage","smart-table","app.directive.format","app.service.draw","app.service.fund"])}(),function(){"use strict";angular.module("app.home",[])}(),function(){"use strict";angular.module("app.login",[])}(),function(){"use strict";angular.module("app.projects.overview",["ngMessages","ui.router","angular-storage","smart-table","app.service.category","app.service.chart","app.service.fund"])}(),function(){"use strict";angular.module("app.projects",["ngMessages","ui.router","angular-storage","smart-table","app.directive.format","app.service.project","app.service.utility"])}(),function(){"use strict";angular.module("app.signup",[])}(),function(){"use strict";angular.module("app.projects.subcontractors",["ngMessages","ui.router","angular-storage","smart-table","app.service.subcontractor"])}(),function(){"use strict";angular.module("app.tutorial",[])}(),function(){"use strict";function emailAvailability($q,utilityService){function linkFunc(scope,el,attr,ctrl){ctrl.$asyncValidators.emailAvailability=function(email){function verifyEmail(email){return utilityService.verifyEmail(email)}function success(response){return ctrl.$setValidity("emailAvailability",!0),$q.resolve(response)}function error(response){return ctrl.$setValidity("emailAvailability",!1),$q.reject(response)}return verifyEmail(email).then(success)["catch"](error)}}var directive={restrict:"A",require:"ngModel",link:linkFunc};return directive}angular.module("app.directive.email-availability",[]).directive("emailAvailability",emailAvailability),emailAvailability.$inject=["$q","utilityService"]}(),function(){"use strict";function format($filter){function linkFunc(scope,el,attr,ctrl){function formatter(a){return $filter(attr.format)(ctrl.$modelValue)}function parser(viewValue){var plainNumber=viewValue.replace(/[^\d|\-+|\.+]/g,"");return el.val($filter(attr.format)(plainNumber)),plainNumber}ctrl.$formatters.unshift(formatter),ctrl.$parsers.unshift(parser)}var directive={restrict:"A",require:"ngModel",link:linkFunc};return directive}angular.module("app.directive.format",[]).directive("format",format),format.$inject=["$filter"]}(),function(){"use strict";function pageSelect(){function linkFunc(scope,el,attr,ctrl){scope.$watch("currentPage",function(c){scope.inputPage=c})}var directive={restrict:"E",template:'<input type="text" class="select-page" ng-model="inputPage" ng-change="selectPage(inputPage)">',link:linkFunc};return directive}angular.module("app.directive.page-select",[]).directive("pageSelect",pageSelect)}(),function(){"use strict";function usernameAvailability($q,utilityService){function linkFunc(scope,el,attr,ctrl){ctrl.$asyncValidators.usernameAvailability=function(username){function verifyUsername(username){return utilityService.verifyUsername(username)}function success(response){return ctrl.$setValidity("usernameAvailability",!0),$q.resolve(response)}function error(response){return ctrl.$setValidity("usernameAvailability",!1),$q.reject(response)}return verifyUsername(username).then(success)["catch"](error)}}var directive={restrict:"A",require:"ngModel",link:linkFunc};return directive}angular.module("app.directive.username-availability",[]).directive("usernameAvailability",usernameAvailability),usernameAvailability.$inject=["$q","utilityService"]}(),function(){"use strict";function AccountController($scope,User,userService){var vm=this;vm.account={},vm.account.email=User.email,vm.account.username=User.username,$scope.updateAccount=function(){function updateAccount(){return userService.updateUser(vm.account)}function success(response){vm.updateAccountSuccess=!0,btn.button("reset")}function error(){$scope.accountForm.$invalid=!0,vm.updateAccountError=!0,btn.button("reset")}var btn=$("#update-account-button").button("loading");return updateAccount().then(success)["catch"](error)},$scope.updatePassword=function(){function updatePassword(){return userService.updatePassword(vm.account.newPassword)}function success(response){vm.updatePasswordSuccess=!0,btn.button("reset")}function error(response){$scope.passwordForm.$invalid=!0,vm.updatePasswordError=!0,btn.button("reset")}var btn=$("#update-password-button").button("loading");return updatePassword().then(success)["catch"](error)}}angular.module("app.account").controller("AccountController",AccountController),AccountController.$inject=["$scope","User","userService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("account",{url:"/account",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/account.html",controller:"AccountController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.account").config(route),route.$inject=["$stateProvider"],updateUser.$inject=["userService","$q"],NavController.$inject=["User"]}(),function(){"use strict";function BillingController($scope,stripeService){function getSubscription(){function showSubscription(response){vm.card={},vm.card.name=response.data.sources.data[0].name,vm.card.last4=response.data.sources.data[0].last4,vm.card.brand=response.data.sources.data[0].brand,vm.plan=response.data.subscriptions.data[0].plan.id}function error(response){vm.errorMsgGet=!0}return stripeService.retrieveSubscription().then(showSubscription)["catch"](error)}var vm=this;getSubscription(),$scope.showUpdateCardModal=function(){vm.updatedCard={},$scope.editCardForm.$setPristine(),$("#edit-card-modal").modal("show")},$scope.updateCard=function(){function createToken(){return stripeService.createCardToken(vm.updatedCard)}function updateSubscription(response){return stripeService.updateSubscription(response.id)}function updateSuccess(response){$("#edit-card-modal").modal("hide"),btn.button("reset"),getSubscription()}function error(){$scope.editCardForm.$invalid=!0,btn.button("reset")}var btn=$("#update-card-button").button("loading"),valid=stripeService.validateCard(vm.updatedCard);valid?createToken().then(updateSubscription).then(updateSuccess)["catch"](error):error()}}angular.module("app.account.billing").controller("BillingController",BillingController),BillingController.$inject=["$scope","stripeService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("billing",{url:"/account/billing",resolve:{User:function(userService,$q){function responseHandler(response){return response.data}function errorHandler(response){return $q.reject(response.data)}return userService.retrieve().then(responseHandler)["catch"](errorHandler)}},views:{nav:{templateUrl:"html/nav2.html",controller:function($scope,User){$scope.username=User.username}},body:{templateUrl:"html/billing.html",controller:"BillingController",controllerAs:"vm"}},data:{requiresLogin:!0}})}angular.module("app.account.billing").config(route),route.$inject=["$stateProvider"]}(),function(){"use strict";function CostController($scope,store,categoryService,itemService,expenditureService){function showCategories(){function getCategories(){function success(response){return vm.categoryList=response.data.objects,vm.categoryList}return categoryService.retrieveList().then(success)["catch"](error)}function populateTable(){var grandTotalEstimated=0,grandTotalActual=0;angular.forEach(vm.categoryList,function(category){var totalEstimated=0,totalActual=0;angular.forEach(category.items,function(item){totalEstimated+=item.estimated,totalActual+=item.actual}),category.totalEstimated=totalEstimated,category.totalActual=totalActual,grandTotalEstimated+=totalEstimated,grandTotalActual+=totalActual}),vm.grandTotalEstimated=grandTotalEstimated,vm.grandTotalActual=grandTotalActual}function error(response){vm.errorGet=!0}return getCategories().then(populateTable)["catch"](error)}var vm=this;vm.project=store.get("project"),showCategories(),$scope.clickedCheckbox=function(category){var isSelected=!1;angular.forEach(category.items,function(item){item.selected&&(isSelected=!0)}),vm.selected=isSelected},$scope.addItemModal=function(){vm.item={},vm.item.estimated=0,vm.item.actual=0,$scope.addItemForm.$setPristine(),$("#add-item-button").button("reset"),$("#add-item-modal").modal("show")},$scope.addItem=function(){function addCategory(){return categoryService.create(vm.item.newCategory)}function newCategory(response){vm.item.category=response.data.id}function addItem(){return itemService.create(vm.item)}function success(){$("#add-item-modal").modal("hide"),showCategories()}function error(){$scope.addItemForm.$invalid=!0,$("#add-item-button").button("reset")}return $("#add-item-button").button("loading"),vm.item.newCategory?addCategory().then(newCategory).then(addItem).then(success)["catch"](error):addItem().then(success)["catch"](error)},$scope.deleteManyItemsModal=function(){$("#delete-button").hasClass("disabled")||(vm.errorDeleteManyItems=!1,$("#delete-many-items-button").button("reset"),$("#delete-many-items-modal").modal("show"))},$scope.deleteManyItems=function(){function deleteItem(item){return itemService.remove(item)}function success(){$("#delete-many-items-modal").modal("hide"),vm.selected=!1,showCategories()}function error(){vm.errorDeleteManyItems=!0,$("#delete-many-items-button").button("reset")}$("#delete-many-items-button").button("loading"),angular.forEach(vm.categoryList,function(category){angular.forEach(category.items,function(item){if(item.selected)return deleteItem(item).then(success)["catch"](error)})})},$scope.deleteItemModal=function(item){vm.errorDeleteItem=!1,vm.item={},vm.item=item,$("#delete-item-button").button("reset"),$("#delete-item-modal").modal("show")},$scope.deleteItem=function(){function deleteItem(){return itemService.remove(vm.item)}function success(){$("#delete-item-modal").modal("hide"),showCategories()}function error(){vm.errorDeleteItem=!0,$("#delete-item-button").button("reset")}return $("#delete-item-button").button("loading"),deleteItem().then(success)["catch"](error)},$scope.updateItemModal=function(category,item){vm.item={},vm.item.id=item.id,vm.item.category={id:category.id,name:category.name},vm.item.name=item.name,vm.item.description=item.description,vm.item.estimated=item.estimated,vm.item.actual=item.actual,$scope.updateItemForm.$setPristine(),$("#update-item-button").button("reset"),$("#update-item-modal").modal("show")},$scope.updateItem=function(){function updateItem(){return itemService.update(vm.item)}function success(){$("#update-item-modal").modal("hide"),showCategories()}function error(){$scope.updateItemForm.$invalid=!0,$("#update-item-button").button("reset")}return $("#update-item-button").button("loading"),updateItem().then(success)["catch"](error)},$scope.deleteCategoryModal=function(category){vm.errorDeleteCategory=!1,vm.category={},vm.category=category,$("#delete-category-button").button("reset"),$("#delete-category-modal").modal("show")},$scope.deleteCategory=function(){function getExpenditures(){return expenditureService.retrieveByCategory(vm.category)}function setExpenditures(response){expenditures=response.data.num_results}function getItems(){return itemService.retrieveByCategory(vm.category)}function setItems(response){items=response.data.num_results}function checkCategory(){return 0===expenditures&&0===items?deleteCategory():0!==expenditures&&0!==items?deleteExpenditures().then(deleteItems).then(deleteCategory):0!==expenditures&&0===items?deleteExpenditures().then(deleteCategory):deleteItems().then(deleteCategory)}function deleteExpenditures(){return expenditureService.removeByCategory(vm.category)}function deleteItems(){return itemService.removeByCategory(vm.category)}function deleteCategory(){return categoryService.remove(vm.category)}function success(){$("#delete-category-modal").modal("hide"),showCategories()}function error(){vm.errorDeleteCategory=!0,$("#delete-category-button").button("reset")}$("#delete-category-button").button("loading");var expenditures=0,items=0;return getExpenditures().then(setExpenditures).then(getItems).then(setItems).then(checkCategory).then(success)["catch"](error)},$scope.updateCategoryModal=function(category){vm.category={},vm.category.id=category.id,vm.category.name=category.name,$scope.updateCategoryForm.$setPristine(),$("#update-category-button").button("reset"),$("#update-category-modal").modal("show")},$scope.updateCategory=function(){function updateCategory(){return categoryService.update(vm.category)}function success(){$("#update-category-modal").modal("hide"),showCategories()}function error(){$scope.updateCategoryForm.$invalid=!0,$("#update-category-button").button("reset")}return $("#update-category-button").button("loading"),updateCategory().then(success)["catch"](error)}}angular.module("app.projects.cost").controller("CostController",CostController),CostController.$inject=["$scope","store","categoryService","itemService","expenditureService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("cost",{url:"/projects/cost",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/cost.html",controller:"CostController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.projects.cost").config(route),route.$inject=["$stateProvider"],updateUser.$inject=["userService","$q"],NavController.$inject=["User"]}(),function(){"use strict";function ExpendituresController($scope,store,$filter,expenditureService,subcontractorService,itemService,fundService){function showExpenditures(){function getExpenditures(){function success(response){return vm.expenditureList=response.data.objects,vm.expenditureList}function error(){vm.errorGet=!0}return expenditureService.retrieveList().then(success)["catch"](error)}return getExpenditures()}function setSubcontractors(){function getSubcontractors(){function success(response){return vm.subcontractorList=response.data.objects,vm.subcontractorList}function error(){vm.errorGet=!0}return subcontractorService.retrieveList().then(success)["catch"](error)}return getSubcontractors()}function setItems(){function getItems(){function success(response){return vm.itemList=response.data.objects,vm.itemList}return itemService.retrieveList().then(success)["catch"](error)}function populateList(){var list=[];return angular.forEach(vm.itemList,function(item){list.push({id:item.id,name:item.name,category:{id:item.categories.id,name:item.categories.name}})}),vm.itemList=list,vm.itemList}function error(){vm.errorGet=!0}return getItems().then(populateList)["catch"](error)}function setFunds(){function getFunds(){function success(response){return vm.fundList=response.data.objects,vm.fundList}return fundService.retrieveList().then(success)["catch"](error)}function populateList(){var list=[];return angular.forEach(vm.fundList,function(fund){list.push({id:fund.id,name:fund.name})}),vm.fundList=list,vm.fundList}function error(){vm.errorGet=!0}return getFunds().then(populateList)["catch"](error)}var vm=this;vm.project=store.get("project"),showExpenditures(),setSubcontractors(),setItems(),setFunds(),$scope.clickedCheckbox=function(){var isSelected=!1;angular.forEach(vm.expenditureList,function(expenditure){expenditure.selected&&(isSelected=!0)}),vm.selected=isSelected},$scope.addModal=function(){vm.expenditure={},vm.expenditure.date=new Date,$scope.addForm.$setPristine(),$("#add-button").button("reset"),$("#add-modal").modal("show")},$scope.add=function(){function addExpenditure(){return expenditureService.create(vm.expenditure)}function success(){$("#add-modal").modal("hide"),showExpenditures()}function error(){$scope.addForm.$invalid=!0,$("#add-button").button("reset")}return $("#add-button").button("loading"),1==vm.expenditure.question&&(vm.expenditure.company=vm.expenditure.subcontractor.company),addExpenditure().then(success)["catch"](error)},$scope.deleteManyModal=function(){$("#delete-many-button1").hasClass("disabled")||(vm.errorDeleteMany=!1,$("#delete-many-button2").button("reset"),$("#delete-many-modal").modal("show"))},$scope.deleteMany=function(){function deleteExpenditure(expenditure){return expenditureService.remove(expenditure)}function success(){$("#delete-many-modal").modal("hide"),vm.selected=!1,showExpenditures()}function error(){vm.errorDeleteMany=!0,$("#delete-many-button2").button("reset")}$("#delete-many-button2").button("loading"),angular.forEach(vm.expenditureList,function(expenditure){if(expenditure.selected)return deleteExpenditure(expenditure).then(success)["catch"](error)})},$scope.deleteModal=function(expenditure){vm.errorDelete=!1,vm.expenditure={},vm.expenditure.id=expenditure.id,$("#delete-button").button("reset"),$("#delete-modal").modal("show")},$scope["delete"]=function(){function deleteExpenditure(){return expenditureService.remove(vm.expenditure)}function success(){$("#delete-modal").modal("hide"),showExpenditures()}function error(){vm.errorDelete=!0,$("#delete-button").button("reset")}return $("#delete-button").button("loading"),deleteExpenditure().then(success)["catch"](error)},$scope.updateModal=function(expenditure){var date=new Date(expenditure.date);vm.expenditure={},vm.expenditure.id=expenditure.id,vm.expenditure.date=new Date(date.getTime()+6e4*date.getTimezoneOffset()),vm.expenditure.company=expenditure.company,vm.expenditure.item={id:expenditure.items.id,name:expenditure.items.name,category:{id:expenditure.categories.id,name:expenditure.categories.name}},vm.expenditure.notes=expenditure.notes,vm.expenditure.cost=expenditure.cost,vm.expenditure.fund={id:expenditure.funds.id,name:expenditure.funds.name},$scope.updateForm.$setPristine(),$("#update-button").button("reset"),$("#update-modal").modal("show")},$scope.update=function(){function updateExpenditure(){return expenditureService.update(vm.expenditure)}function success(){$("#update-modal").modal("hide"),showExpenditures()}function error(){$scope.updateForm.$invalid=!0,$("#update-button").button("reset")}return $("#update-button").button("loading"),updateExpenditure().then(success)["catch"](error)}}angular.module("app.projects.expenditures").controller("ExpendituresController",ExpendituresController),ExpendituresController.$inject=["$scope","store","$filter","expenditureService","subcontractorService","itemService","fundService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("expenditures",{url:"/projects/expenditures",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/expenditures.html",controller:"ExpendituresController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.projects.expenditures").config(route),route.$inject=["$stateProvider"],updateUser.$inject=["userService","$q"],NavController.$inject=["User"]}(),function(){"use strict";function FundsController($scope,store,fundService,drawService){function showFunds(){function getFunds(){function success(response){return vm.fundList=response.data.objects,vm.fundList}return fundService.retrieveList().then(success)["catch"](error)}function updateTable(){angular.forEach(vm.fundList,function(fund){var totalExpenditure=0,totalDraw=0;angular.forEach(fund.expenditures,function(expenditure){totalExpenditure+=expenditure.cost}),angular.forEach(fund.draws,function(draw){totalDraw+=draw.amount}),fund.totalExpenditure=totalExpenditure,fund.totalDraw=totalDraw,fund.spent=Math.round(totalExpenditure/fund.amount*100),fund.left=Math.round((fund.amount-totalExpenditure)/fund.amount*100),fund.drawReceived=Math.round(totalDraw/fund.amount*100),fund.drawLeft=Math.round((fund.amount-totalDraw)/fund.amount*100)})}function error(response){vm.errorGet=!0}return getFunds().then(updateTable)["catch"](error)}var vm=this;vm.project=store.get("project"),showFunds(),$scope.clickedFund=function(fund){var index=vm.fundList.indexOf(fund);return index!==-1&&(store.set("fund",fund),!0)},$scope.clickedDraw=function(draw){var index=store.get("fund").draws.indexOf(draw);return index!==-1&&(store.set("draw",draw),!0)},$scope.clickedAllCheckbox=function(){angular.forEach(store.get("fund").draws,function(draw){draw.selected=store.get("fund").checkboxAll,store.get("fund").selected=draw.selected})},$scope.clickedCheckbox=function(draw){if(draw.selected)store.get("fund").selected=!0;else{var isSelected=!1;angular.forEach(store.get("fund").draws,function(d){d.selected&&(isSelected=!0)}),store.get("fund").selected=isSelected}},$scope.addFundModal=function(){vm.fund={},vm.loanQuestion=[{value:!0,name:"Yes"},{value:!1,name:"No"}],$scope.addFundForm.$setPristine(),$("#add-fund-button").button("reset"),$("#add-fund-modal").modal("show")},$scope.addFund=function(){function addFund(){return fundService.create(vm.fund)}function success(){$("#add-fund-modal").modal("hide"),showFunds()}function error(){$scope.addFundForm.$invalid=!0,$("#add-fund-button").button("reset")}return $("#add-fund-button").button("loading"),addFund().then(success)["catch"](error)},$scope.deleteFundModal=function(fund){vm.errorDeleteFund=!1,vm.fund={},vm.fund=fund,$("#delete-fund-button").button("reset"),$("#delete-fund-modal").modal("show")},$scope.deleteFund=function(){function deleteDraws(){return drawService.removeByFund(vm.fund)}function deleteFund(){return fundService.remove(vm.fund)}function success(){$("#delete-fund-modal").modal("hide"),showFunds()}function error(response){vm.errorDeleteFund=!0,$("#delete-fund-button").button("reset")}return $("#delete-fund-button").button("loading"),0===vm.fund.draws.length?deleteFund().then(success)["catch"](error):deleteDraws().then(deleteFund).then(success)["catch"](error)},$scope.updateFundModal=function(fund){vm.fund={},vm.fund.id=fund.id,vm.fund.name=fund.name,vm.fund.amount=fund.amount,$scope.updateFundForm.$setPristine(),$("#update-fund-button").button("reset"),$("#update-fund-modal").modal("show")},$scope.updateFund=function(){function updateFund(){return fundService.update(vm.fund)}function success(){$("#update-fund-modal").modal("hide"),showFunds()}function error(){$scope.updateFundForm.$invalid=!0,$("#update-fund-button").button("reset")}return $("#update-fund-button").button("loading"),updateFund().then(success)["catch"](error)},$scope.showAddDrawModal=function(){vm.draw={},vm.draw.date=new Date,$scope.addDrawForm.$setPristine(),$("#add-draw-modal").modal("show")},$scope.addDraw=function(){function addDraw(){return drawService.create(vm.draw)}function addSuccess(response){$("#add-draw-modal").modal("hide"),btn.button("reset"),showFunds()}function error(response){$scope.addDrawForm.$invalid=!0,btn.button("reset")}var btn=$("#add-draw-button").button("loading");addDraw().then(addSuccess)["catch"](error)},$scope.showDeleteDrawsModal=function(){store.get("fund").selected&&(vm.errorMsgDeleteDraws=!1,$("#delete-draws-modal").modal("show"))},$scope.deleteDraws=function(){function deleteDraw(draw_id){return drawService.remove(draw_id)}function deleteSuccess(response){$("#delete-draws-modal").modal("hide"),btn.button("reset"),showFunds()}function error(response){vm.errorMsgDeleteDraws=!0,btn.button("reset")}var btn=$("#delete-draw-button").button("loading");angular.forEach(store.get("fund").draws,function(draw){draw.selected&&deleteDraw(draw.id).then(deleteSuccess)["catch"](error)})},$scope.showEditDrawModal=function(){vm.updatedDraw={},vm.updatedDraw.date=new Date(store.get("draw").date),vm.updatedDraw.amount=store.get("draw").amount,$scope.editDrawForm.$setPristine(),$("#edit-draw-modal").modal("show")},$scope.updateDraw=function(){function updateDraw(){return drawService.update(vm.updatedDraw)}function updateSuccess(response){$("#edit-draw-modal").modal("hide"),btn.button("reset"),showFunds()}function error(response){$scope.editDrawForm.$invalid=!0,btn.button("reset")}var btn=$("#update-draw-button").button("loading");updateDraw().then(updateSuccess)["catch"](error)}}angular.module("app.projects.funds").controller("FundsController",FundsController),FundsController.$inject=["$scope","store","fundService","drawService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("funds",{url:"/projects/funds",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/funds.html",controller:"FundsController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.projects.funds").config(route),route.$inject=["$stateProvider"],updateUser.$inject=["userService","$q"],NavController.$inject=["User"]}(),function(){"use strict";function HomeController(store){store.remove("jwt")}angular.module("app.home").controller("HomeController",HomeController),HomeController.$inject=["store"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("home",{url:"/",views:{nav:{templateUrl:"html/nav1.html"},body:{templateUrl:"html/home.html",controller:"HomeController",controllerAs:"vm"}}})}angular.module("app.home").config(route),route.$inject=["$stateProvider"]}(),function(){"use strict";function LoginController($scope,store,$state,authService){var vm=this;store.remove("jwt"),$scope.logIn=function(){function authenticateUser(){return authService.authenticate(vm.username,vm.password)}function goProjects(){$state.go("projects")}function error(){$scope.loginForm.$invalid=!0,vm.password="",$("#login-button").button("reset")}return $("#login-button").button("loading"),authenticateUser().then(goProjects)["catch"](error)}}angular.module("app.login").controller("LoginController",LoginController),LoginController.$inject=["$scope","store","$state","authService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("login",{url:"/login",views:{nav:{templateUrl:"html/nav1.html"},body:{templateUrl:"html/login.html",controller:"LoginController",controllerAs:"vm"}}})}angular.module("app.login").config(route),route.$inject=["$stateProvider"]}(),function(){"use strict";function OverviewController(store,chartService,categoryService,fundService){function showCategories(){function getCategories(){function success(response){return vm.categoryList=response.data.objects,vm.categoryList}return categoryService.retrieveList().then(success)["catch"](error)}function populateProgressBars(){angular.forEach(vm.categoryList,function(category){var totalExpenditure=0,totalBudget=0;angular.forEach(category.expenditures,function(expenditure){totalExpenditure+=expenditure.cost}),angular.forEach(category.items,function(item){totalBudget+=item.actual}),category.totalExpenditure=totalExpenditure,category.totalBudget=totalBudget,0===totalBudget&&totalBudget<totalExpenditure?(category.spent=100,category.left=0):(category.spent=Math.round(totalExpenditure/totalBudget*100),category.left=Math.round((totalBudget-totalExpenditure)/totalBudget*100))})}function populatePieChart(){options.series[0].data=[],0===vm.categoryList.length?options.series[0].data.push({name:"No Data",y:.01}):angular.forEach(vm.categoryList,function(category){if(0!==category.items.length){var categoryTotal=0;angular.forEach(category.items,function(item){categoryTotal+=item.actual}),options.series[0].data.push({name:category.name,y:categoryTotal})}}),$("#piechart-container").highcharts(options)}function populateTable(){var grandTotalEstimated=0,grandTotalActual=0,grandTotalExpenditure=0;angular.forEach(vm.categoryList,function(category){var totalEstimated=0,totalActual=0,totalExpenditure=0;angular.forEach(category.items,function(item){totalEstimated+=item.estimated,totalActual+=item.actual}),angular.forEach(category.expenditures,function(expenditure){totalExpenditure+=expenditure.cost}),category.totalEstimated=totalEstimated,category.totalActual=totalActual,category.totalExpenditure=totalExpenditure,grandTotalEstimated+=totalEstimated,grandTotalActual+=totalActual,grandTotalExpenditure+=totalExpenditure,totalExpenditure>=totalActual?(category.paid=100,category.unpaid=0):(category.paid=Math.round(totalExpenditure/totalActual*100),category.unpaid=totalActual-totalExpenditure)}),vm.grandTotalEstimated=grandTotalEstimated,vm.grandTotalActual=grandTotalActual,vm.grandTotalExpenditure=grandTotalExpenditure,vm.grandTotalSpent=Math.round(grandTotalExpenditure/grandTotalActual*100),vm.grandTotalLeft=Math.round((grandTotalActual-grandTotalExpenditure)/grandTotalActual*100)}return getCategories().then(populateProgressBars).then(populatePieChart).then(populateTable)["catch"](error);
}function showFunds(){function getFunds(){function success(response){return vm.fundList=response.data.objects,vm.fundList}return fundService.retrieveList().then(success)["catch"](error)}function populateProgressBars(){angular.forEach(vm.fundList,function(fund){var totalExpenditure=0,totalDraw=0;angular.forEach(fund.expenditures,function(expenditure){totalExpenditure+=expenditure.cost}),angular.forEach(fund.draws,function(draw){totalDraw+=draw.amount}),fund.totalExpenditure=totalExpenditure,fund.totalDraw=totalDraw,fund.spent=Math.round(totalExpenditure/fund.amount*100),fund.left=Math.round((fund.amount-totalExpenditure)/fund.amount*100),fund.drawReceived=Math.round(totalDraw/fund.amount*100),fund.drawLeft=Math.round((fund.amount-totalDraw)/fund.amount*100)})}return getFunds().then(populateProgressBars)["catch"](error)}function error(){vm.errorGet=!0}var vm=this;vm.project=store.get("project");var options=chartService.setPieChartOptions();showCategories(),showFunds()}angular.module("app.projects.overview").controller("OverviewController",OverviewController),OverviewController.$inject=["store","chartService","categoryService","fundService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("overview",{url:"/projects/overview",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/overview.html",controller:"OverviewController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.projects.overview").config(route),route.$inject=["$stateProvider"],updateUser.$inject=["userService","$q"],NavController.$inject=["User"]}(),function(){"use strict";function ProjectsController($scope,store,projectService,utilityService){function showProjects(){function getProjects(){return projectService.retrieveList()}function success(response){return vm.projectList=response.data.objects,vm.projectList}function error(response){vm.errorGet=!0}return getProjects().then(success)["catch"](error)}var vm=this;showProjects(),$scope.clicked=function(project){var index=vm.projectList.indexOf(project);return index!==-1&&(store.set("project",project),!0)},$scope.addModal=function(){vm.project={},$scope.addForm.$setPristine(),$("#add-button").button("reset"),$("#add-modal").modal("show")},$scope.add=function(){function parseFile(){var file=$("#project-file")[0].files[0];return utilityService.parseUbuilditFile(vm.project,file)}function createProject(){return projectService.create(vm.project)}function success(response){$("#add-modal").modal("hide"),showProjects()}function error(response){$scope.addForm.$invalid=!0,$("#add-button").button("reset")}return $("#add-button").button("loading"),$("#project-file").length&&$("#project-file")[0].files[0]?parseFile().then(success)["catch"](error):createProject().then(success)["catch"](error)},$scope.deleteModal=function(project){vm.errorDelete=!1,vm.deleted=project,$("#delete-button").button("reset"),$("#delete-modal").modal("show")},$scope["delete"]=function(){function deleteProject(){return projectService.remove(vm.deleted)}function success(response){$("#delete-modal").modal("hide"),showProjects()}function error(response){vm.errorDelete=!0,$("#delete-button").button("reset")}return $("#delete-button").button("loading"),deleteProject().then(success)["catch"](error)},$scope.updateModal=function(project){vm.project={},vm.project.id=project.id,vm.project.name=project.name,vm.project.address=project.address,vm.project.city=project.city,vm.project.state=project.state,vm.project.zipcode=project.zipcode,vm.project.homeSq=project.home_sq,$scope.updateForm.$setPristine(),$("#update-button").button("reset"),$("#update-modal").modal("show")},$scope.update=function(){function updateProject(){return projectService.update(vm.project)}function success(){$("#update-modal").modal("hide"),showProjects()}function error(){$scope.updateForm.$invalid=!0,$("#update-button").button("reset")}return $("#update-button").button("loading"),updateProject().then(success)["catch"](error)}}angular.module("app.projects").controller("ProjectsController",ProjectsController),ProjectsController.$inject=["$scope","store","projectService","utilityService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("projects",{url:"/projects",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/projects.html",controller:"ProjectsController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.projects").config(route),route.$inject=["$stateProvider"],updateUser.$inject=["userService","$q"],NavController.$inject=["User"]}(),function(){"use strict";function SignupController($scope,store,$state,userService,authService){var vm=this;vm.plan="free",store.remove("jwt"),$scope.signUp=function(){function createUser(){return userService.create(vm)}function authenticateUser(){return authService.authenticate(vm.username,vm.password)}function goTutorial(){$state.go("tutorial")}function error(){$scope.signupForm.$invalid=!0,btn.button("reset")}var btn=$("#signup-button").button("loading");return createUser().then(authenticateUser).then(goTutorial)["catch"](error)}}angular.module("app.signup").controller("SignupController",SignupController),SignupController.$inject=["$scope","store","$state","userService","authService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("signup",{url:"/signup",views:{nav:{templateUrl:"html/nav1.html"},body:{templateUrl:"html/signup.html",controller:"SignupController",controllerAs:"vm"}}})}angular.module("app.signup").config(route),route.$inject=["$stateProvider"]}(),function(){"use strict";function SubcontractorsController($scope,store,subcontractorService){function showSubcontractors(){function getSubcontractors(){function success(response){return vm.subcontractorList=response.data.objects,vm.subcontractorList}function error(){vm.errorGet=!0}return subcontractorService.retrieveList().then(success)["catch"](error)}return getSubcontractors()}var vm=this;vm.project=store.get("project"),showSubcontractors(),$scope.clickedCheckbox=function(){var isSelected=!1;angular.forEach(vm.subcontractorList,function(subcontractor){subcontractor.selected&&(isSelected=!0)}),vm.selected=isSelected},$scope.addModal=function(){vm.subcontractor={},$scope.addForm.$setPristine(),$("#add-button").button("reset"),$("#add-modal").modal("show")},$scope.add=function(){function addSubcontractor(){return subcontractorService.create(vm.subcontractor)}function success(){$("#add-modal").modal("hide"),showSubcontractors()}function error(){$scope.addForm.$invalid=!0,$("#add-button").button("reset")}return $("#add-button").button("loading"),addSubcontractor().then(success)["catch"](error)},$scope.deleteManyModal=function(){$("#delete-many-button1").hasClass("disabled")||(vm.errorDeleteMany=!1,$("#delete-many-button2").button("reset"),$("#delete-many-modal").modal("show"))},$scope.deleteMany=function(){function deleteSubcontractor(subcontractor){return subcontractorService.remove(subcontractor)}function success(){$("#delete-many-modal").modal("hide"),vm.selected=!1,showSubcontractors()}function error(){vm.errorDeleteMany=!0,$("#delete-many-button2").button("reset")}$("#delete-many-button2").button("loading"),angular.forEach(vm.subcontractorList,function(subcontractor){if(subcontractor.selected)return deleteSubcontractor(subcontractor).then(success)["catch"](error)})},$scope.deleteModal=function(subcontractor){vm.errorDelete=!1,vm.subcontractor={},vm.subcontractor=subcontractor,$("#delete-button").button("reset"),$("#delete-modal").modal("show")},$scope["delete"]=function(){function deleteSubcontractor(){return subcontractorService.remove(vm.subcontractor)}function success(){$("#delete-modal").modal("hide"),showSubcontractors()}function error(){vm.errorDelete=!0,$("#delete-button").button("reset")}return $("#delete-button").button("loading"),deleteSubcontractor().then(success)["catch"](error)},$scope.updateModal=function(subcontractor){vm.subcontractor={},vm.subcontractor.id=subcontractor.id,vm.subcontractor.company=subcontractor.company,vm.subcontractor.person=subcontractor.person,vm.subcontractor.number=subcontractor.number,$scope.updateForm.$setPristine(),$("#update-button").button("reset"),$("#update-modal").modal("show")},$scope.update=function(){function updateSubcontractor(){return subcontractorService.update(vm.subcontractor)}function success(){$("#update-modal").modal("hide"),showSubcontractors()}function error(){$scope.updateForm.$invalid=!0,$("#update-button").button("reset")}return $("#update-button").button("loading"),updateSubcontractor().then(success)["catch"](error)}}angular.module("app.projects.subcontractors").controller("SubcontractorsController",SubcontractorsController),SubcontractorsController.$inject=["$scope","store","subcontractorService"]}(),function(){"use strict";function route($stateProvider){$stateProvider.state("subcontractors",{url:"/projects/subcontractors",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/subcontractors.html",controller:"SubcontractorsController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.projects.subcontractors").config(route),route.$inject=["$stateProvider"],updateUser.$inject=["userService","$q"],NavController.$inject=["User"]}(),function(){"use strict";function TutorialController(){}angular.module("app.tutorial").controller("TutorialController",TutorialController)}(),function(){"use strict";function route($stateProvider){$stateProvider.state("tutorial",{url:"/tutorial",resolve:{User:updateUser},views:{nav:{templateUrl:"html/nav2.html",controller:NavController,controllerAs:"vm"},body:{templateUrl:"html/tutorial.html",controller:"TutorialController",controllerAs:"vm"}},data:{requiresLogin:!0}})}function updateUser(userService,$q){function getUser(){return userService.retrieve()}function success(response){return $q.resolve(response.data)}function error(response){return $q.reject(response)}return getUser().then(success)["catch"](error)}function NavController(User){var vm=this;vm.username=User.username}angular.module("app.tutorial").config(route),route.$inject=["$stateProvider"]}(),function(){"use strict";function authService($http,store,jwtHelper,$q,API_URL){function authenticate(login,password){function success(response){var token=response.data.token,payload=jwtHelper.decodeToken(token),user={id:payload.user_id};return store.set("jwt",token),store.set("user",user),$q.resolve(response)}function error(response){return $q.reject(response)}var data={login:login,password:password};return $http.post(url,data).then(success)["catch"](error)}var url=API_URL+"/api/auth",service={authenticate:authenticate};return service}angular.module("app.service.auth",[]).factory("authService",authService),authService.$inject=["$http","store","jwtHelper","$q","API_URL"]}(),function(){"use strict";function categoryService($http,store,$q,API_URL){function retrieveList(){return $http.get(url+query("project_id","equals",store.get("project").id)).then(success)["catch"](error)}function create(name){var data={name:name,project_id:store.get("project").id};return $http.post(url,data).then(success)["catch"](error)}function update(category){var data={name:category.name,project_id:store.get("project").id};return $http.put(url+"/"+category.id,data).then(success)["catch"](error)}function remove(category){return $http["delete"](url+"/"+category.id).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}function query(name,op,val){return'?q={"filters":[{"name":"'+name+'","op":"'+op+'","val":"'+val+'"}]}'}var url=API_URL+"/api/categories",service={retrieveList:retrieveList,create:create,update:update,remove:remove};return service}angular.module("app.service.category",[]).factory("categoryService",categoryService),categoryService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function chartService(){function setPieChartOptions(){return{chart:{type:"pie",style:{fontFamily:"Montserrat, 'Helvetica Neue', Helvetica, Arial, sans-serif"}},title:{text:""},tooltip:{headerFormat:'<span style="font-size: 14px"> {point.key} </span><br>',pointFormat:'<span style="font-size: 14px"> <b> ${point.y:.2f} </b> </span><br>'},plotOptions:{pie:{allowPointSelect:!0,cursor:"pointer",dataLabels:{enabled:!0,format:'<span style="font-size: 11px"> {point.name} </span><br> {point.percentage:.2f}%'}}},series:[{name:"Categories",data:[]}],credits:{enabled:!1}}}var service={setPieChartOptions:setPieChartOptions};return service}angular.module("app.service.chart",[]).factory("chartService",chartService)}(),function(){"use strict";function drawService($http,store,$q,API_URL){function create(draw){var data={date:draw.date,amount:draw.amount,fund_id:store.get("fund").id};return $http.post(url,data).then(success)["catch"](error)}function update(draw){var data={date:draw.date,amount:draw.amount,fund_id:store.get("fund").id};return $http.put(url+"/"+store.get("draw").id,data).then(success)["catch"](error)}function remove(drawId){return $http["delete"](url+"/"+drawId).then(success)["catch"](error)}function removeByFund(fund){return $http["delete"](url+query("fund_id","equals",fund.id)).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}function query(name,op,val){return'?q={"filters":[{"name":"'+name+'","op":"'+op+'","val":"'+val+'"}]}'}var url=API_URL+"/api/draws",service={create:create,update:update,remove:remove,removeByFund:removeByFund};return service}angular.module("app.service.draw",[]).factory("drawService",drawService),drawService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function expenditureService($http,store,$q,$filter,API_URL){function retrieveList(){return $http.get(url+query("project_id","equals",store.get("project").id)).then(success)["catch"](error)}function create(expenditure){var data={date:$filter("date")(expenditure.date,"yyyy-MM-dd"),company:expenditure.company,cost:expenditure.cost,fund_id:expenditure.fund.id,category_id:expenditure.item.category.id,item_id:expenditure.item.id,project_id:store.get("project").id};return $http.post(url,data).then(success)["catch"](error)}function update(expenditure){var data={date:$filter("date")(expenditure.date,"yyyy-MM-dd"),company:expenditure.company,cost:expenditure.cost,fund_id:expenditure.fund.id,category_id:expenditure.item.category.id,item_id:expenditure.item.id,project_id:store.get("project").id};return $http.put(url+"/"+expenditure.id,data).then(success)["catch"](error)}function remove(expenditure){return $http["delete"](url+"/"+expenditure.id).then(success)["catch"](error)}function retrieveByCategory(category){return $http.get(url+query("category_id","equals",category.id)).then(success)["catch"](error)}function removeByCategory(category){return $http["delete"](url+query("category_id","equals",category.id)).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}function query(name,op,val){return'?q={"filters":[{"name":"'+name+'","op":"'+op+'","val":"'+val+'"}]}'}var url=API_URL+"/api/expenditures",service={retrieveList:retrieveList,create:create,update:update,remove:remove,retrieveByCategory:retrieveByCategory,removeByCategory:removeByCategory};return service}angular.module("app.service.expenditure",[]).factory("expenditureService",expenditureService),expenditureService.$inject=["$http","store","$q","$filter","API_URL"]}(),function(){"use strict";function fundService($http,store,$q,API_URL){function retrieveList(){return $http.get(url+query("project_id","equals",store.get("project").id)).then(success)["catch"](error)}function create(fund){var data={name:fund.name,loan:fund.loan,amount:fund.amount,project_id:store.get("project").id};return $http.post(url,data).then(success)["catch"](error)}function update(fund){var data={name:fund.name,amount:fund.amount,project_id:store.get("project").id};return $http.put(url+"/"+fund.id,data).then(success)["catch"](error)}function remove(fund){return $http["delete"](url+"/"+fund.id).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}function query(name,op,val){return'?q={"filters":[{"name":"'+name+'","op":"'+op+'","val":"'+val+'"}]}'}var url=API_URL+"/api/funds",service={retrieveList:retrieveList,create:create,update:update,remove:remove};return service}angular.module("app.service.fund",[]).factory("fundService",fundService),fundService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function itemService($http,store,$q,API_URL){function retrieveList(){return $http.get(url+query("project_id","equals",store.get("project").id)).then(success)["catch"](error)}function create(item){var data={name:item.name,description:item.description,estimated:item.estimated,actual:item.actual,category_id:item.category,project_id:store.get("project").id};return $http.post(url,data).then(success)["catch"](error)}function update(item){var data={name:item.name,description:item.description,estimated:item.estimated,actual:item.actual,category_id:item.category.id,project_id:store.get("project").id};return $http.put(url+"/"+item.id,data).then(success)["catch"](error)}function remove(item){return $http["delete"](url+"/"+item.id).then(success)["catch"](error)}function retrieveByCategory(category){return $http.get(url+query("category_id","equals",category.id)).then(success)["catch"](error)}function removeByCategory(category){return $http["delete"](url+query("category_id","equals",category.id)).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}function query(name,op,val){return'?q={"filters":[{"name":"'+name+'","op":"'+op+'","val":"'+val+'"}]}'}var url=API_URL+"/api/items",service={retrieveList:retrieveList,create:create,update:update,remove:remove,retrieveByCategory:retrieveByCategory,removeByCategory:removeByCategory};return service}angular.module("app.service.item",[]).factory("itemService",itemService),itemService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function projectService($http,store,$q,API_URL){function retrieveList(){return $http.get(url+query("user_id","equals",store.get("user").id)).then(success)["catch"](error)}function create(project){var data={name:project.name,address:project.address,city:project.city,state:project.state,zipcode:project.zipcode,home_sq:project.homeSq,project_type:project.type,user_id:store.get("user").id};return $http.post(url,data).then(success)["catch"](error)}function update(project){var data={name:project.name,address:project.address,city:project.city,state:project.state,zipcode:project.zipcode,home_sq:project.homeSq,user_id:store.get("user").id};return $http.put(url+"/"+project.id,data).then(success)["catch"](error)}function remove(project){return $http["delete"](url+"/"+project.id).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}function query(name,op,val){return'?q={"filters":[{"name":"'+name+'","op":"'+op+'","val":"'+val+'"}]}'}var url=API_URL+"/api/projects",service={retrieveList:retrieveList,create:create,update:update,remove:remove};return service}angular.module("app.service.project",[]).factory("projectService",projectService),projectService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function stripeService($http,store,$q,API_URL){function validateCard(card){var num=Stripe.card.validateCardNumber(card.cardNumber),exp=Stripe.card.validateExpiry(card.expMonth,card.expYear),cvc=Stripe.card.validateCVC(card.cvc);return!!(num&&exp&&cvc)}function createCardToken(card){var data={number:card.cardNumber,cvc:card.cvc,exp_month:card.expMonth,exp_year:card.expYear,name:card.cardName.toUpperCase()};return $q(function(resolve,reject){function responseCallback(status,response){return response.error?reject(response):resolve(response)}Stripe.card.createToken(data,responseCallback)})}function createSubscription(user,tokenId){var data={email:user.email,username:user.username,password:user.password,plan:user.plan,token_id:tokenId};return $http.post(url,data).then(success)["catch"](error)}function retrieveSubscription(){return $http.get(url+"/"+store.get("user").stripe).then(success)["catch"](error)}function updateSubscription(tokenId){var data={stripe_id:store.get("user").stripe,token_id:tokenId};return $http.put(url+"/"+store.get("user").stripe,data).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}var url=API_URL+"/api/stripe",service={validateCard:validateCard,createCardToken:createCardToken,createSubscription:createSubscription,retrieveSubscription:retrieveSubscription,updateSubscription:updateSubscription};return service}angular.module("app.service.stripe",[]).factory("stripeService",stripeService),stripeService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function subcontractorService($http,store,$q,API_URL){function retrieveList(){return $http.get(url+query("project_id","equals",store.get("project").id)).then(success)["catch"](error)}function create(subcontractor){var data={company:subcontractor.company,person:subcontractor.person,number:subcontractor.number,project_id:store.get("project").id};return $http.post(url,data).then(success)["catch"](error)}function update(subcontractor){var data={company:subcontractor.company,person:subcontractor.person,number:subcontractor.number,project_id:store.get("project").id};return $http.put(url+"/"+subcontractor.id,data).then(success)["catch"](error)}function remove(subcontractor){return $http["delete"](url+"/"+subcontractor.id).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}function query(name,op,val){return'?q={"filters":[{"name":"'+name+'","op":"'+op+'","val":"'+val+'"}]}'}var url=API_URL+"/api/subcontractors",service={retrieveList:retrieveList,create:create,update:update,remove:remove};return service}angular.module("app.service.subcontractor",[]).factory("subcontractorService",subcontractorService),subcontractorService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function userService($http,store,$q,API_URL){function retrieve(){return $http.get(url+"/"+store.get("user").id).then(success)["catch"](error)}function create(user){var data={email:user.email,username:user.username,password:user.password};return $http.post(url,data).then(success)["catch"](error)}function updateUser(user){var data={email:user.email,username:user.username};return $http.put(url+"/"+store.get("user").id,data).then(success)["catch"](error)}function updatePassword(password){return $http.put(url+"/"+store.get("user").id,{password:password}).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}var url=API_URL+"/api/users",service={retrieve:retrieve,create:create,updateUser:updateUser,updatePassword:updatePassword};return service}angular.module("app.service.user",[]).factory("userService",userService),userService.$inject=["$http","store","$q","API_URL"]}(),function(){"use strict";function utilityService($http,store,$q,API_URL){function verifyEmail(email){return $http.post(url+"/email",{email:email}).then(success)["catch"](error)}function verifyUsername(username){return $http.post(url+"/username",{username:username}).then(success)["catch"](error)}function parseUbuilditFile(vm,file){var data=new FormData;data.append("file",file),data.append("name",vm.name),data.append("address",vm.address),data.append("city",vm.city),data.append("state",vm.state),data.append("zipcode",vm.zipcode),data.append("home_sq",vm.homeSq),data.append("project_type",vm.type),data.append("user_id",store.get("user").id);var config={transformRequest:angular.identity,headers:{"Content-Type":void 0}};return $http.post(url+"/ubuildit",data,config).then(success)["catch"](error)}function success(response){return $q.resolve(response)}function error(response){return $q.reject(response)}var url=API_URL+"/api/utility",service={verifyEmail:verifyEmail,verifyUsername:verifyUsername,parseUbuilditFile:parseUbuilditFile};return service}angular.module("app.service.utility",[]).factory("utilityService",utilityService),utilityService.$inject=["$http","store","$q","API_URL"]}();