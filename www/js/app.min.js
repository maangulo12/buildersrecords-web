(function() {
    'use strict';

    angular.module('app', [
        /* Vendor modules */
        'ngMessages',
        'ui.validate',
        'ui.router',
        'angular-jwt',
        'angular-storage',
        'smart-table',
        /* App directives */
        'app.directive.email-availability',
        'app.directive.format',
        'app.directive.page-select',
        'app.directive.username-availability',
        /* App services */
        'app.service.auth',
        'app.service.category',
        'app.service.chart',
        'app.service.draw',
        'app.service.expenditure',
        'app.service.fund',
        'app.service.item',
        'app.service.project',
        'app.service.stripe',
        'app.service.subcontractor',
        'app.service.user',
        'app.service.utility',
        /* App modules */
        'app.home',
        'app.login',
        'app.signup',
        'app.tutorial',
        'app.projects',
        'app.projects.overview',
        'app.projects.cost',
        'app.projects.funds',
        'app.projects.expenditures',
        'app.projects.subcontractors',
        'app.account'
    ]);
})();

(function() {
    'use strict';

    angular
        .module('app')
        .config(config);

    config.$inject = ['$urlRouterProvider', '$locationProvider', 'jwtInterceptorProvider', '$httpProvider'];

    function config($urlRouterProvider, $locationProvider, jwtInterceptorProvider, $httpProvider) {
        // Route to '/' if url not found
        $urlRouterProvider.otherwise('/');
        // Turn on html5mode
        $locationProvider.html5Mode(true);
        // Adds the JSON token to the header of every request
        jwtInterceptorProvider.tokenGetter = function(store) {
            return store.get('jwt');
        };
        $httpProvider.interceptors.push('jwtInterceptor');
    }
})();

(function() {
    'use strict';

    angular
        .module('app')
        .constant('API_URL', 'https://buildersrecords-api-staging.herokuapp.com');
})();

(function() {
    'use strict';

    angular
        .module('app')
        .run(runBlock);

    runBlock.$inject = ['$rootScope', '$state', 'store', 'jwtHelper'];

    function runBlock($rootScope, $state, store, jwtHelper) {
        $rootScope.$on('$stateChangeStart', change);
        // Change function
        function change(e, to) {
            if (to.data && to.data.requiresLogin) {
                if (!store.get('jwt') || jwtHelper.isTokenExpired(store.get('jwt'))) {
                    e.preventDefault();
                    $state.go('login');
                }
            }
        }
    }
})();

(function() {
    'use strict';

    angular.module('app.account', []);
})();

(function() {
    'use strict';

    angular.module('app.account.billing', []);
})();

(function() {
    'use strict';

    angular.module('app.projects.cost', [
        /* Vendor modules */
        'ngMessages',
        'ui.router',
        'angular-storage',
        'smart-table',
        /* App directives */
        'app.directive.format',
        /* App services */
        'app.service.category',
        'app.service.expenditure',
        'app.service.item'
    ]);
})();

(function() {
    'use strict';

    angular.module('app.projects.expenditures', [
        /* Vendor modules */
        'ngMessages',
        'ui.router',
        'angular-storage',
        'smart-table',
        /* App directives */
        'app.directive.format',
        'app.directive.page-select',
        /* App services */
        'app.service.expenditure',
        'app.service.fund',
        'app.service.item',
        'app.service.subcontractor'
    ]);
})();

(function() {
    'use strict';

    angular.module('app.projects.funds', [
        /* Vendor modules */
        'ngMessages',
        'ui.router',
        'angular-storage',
        'smart-table',
        /* App directives */
        'app.directive.format',
        /* App services */
        'app.service.draw',
        'app.service.fund'
    ]);
})();

(function() {
    'use strict';

    angular.module('app.home', []);
})();

(function() {
    'use strict';

    angular.module('app.login', []);
})();

(function() {
    'use strict';

    angular.module('app.projects.overview', [
        /* Vendor modules */
        'ngMessages',
        'ui.router',
        'angular-storage',
        'smart-table',
        /* App services */
        'app.service.category',
        'app.service.chart',
        'app.service.fund'
    ]);
})();

(function() {
    'use strict';

    angular.module('app.projects', [
        /* Vendor modules */
        'ngMessages',
        'ui.router',
        'angular-storage',
        'smart-table',
        /* App directives */
        'app.directive.format',
        /* App services */
        'app.service.project',
        'app.service.utility'
    ]);
})();

(function() {
    'use strict';

    angular.module('app.signup', []);
})();

(function() {
    'use strict';

    angular.module('app.projects.subcontractors', [
        /* Vendor modules */
        'ngMessages',
        'ui.router',
        'angular-storage',
        'smart-table',
        /* App services */
        'app.service.subcontractor'
    ]);
})();

(function() {
    'use strict';

    angular.module('app.tutorial', []);
})();

(function() {
    'use strict';

    /**
    * @desc checks if an email address already exists
    * @example <input ng-model="myModel" email-availability></input>
    */
    angular
        .module('app.directive.email-availability', [])
        .directive('emailAvailability', emailAvailability);

    emailAvailability.$inject = ['$q', 'utilityService'];

    function emailAvailability($q, utilityService) {
        var directive = {
            restrict: 'A',
            require:  'ngModel',
            link:     linkFunc,
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            ctrl.$asyncValidators.emailAvailability = function(email) {
                return verifyEmail(email)
                    .then(success)
                    .catch(error);

                function verifyEmail(email) {
                    return utilityService.verifyEmail(email);
                }
                function success(response) {
                    ctrl.$setValidity('emailAvailability', true);
                    return $q.resolve(response);
                }
                function error(response) {
                    ctrl.$setValidity('emailAvailability', false);
                    return $q.reject(response);
                }
            };
        }
    }
})();

(function() {
    'use strict';

    /**
    * @desc formats an input number field with commas
    * @example <input ng-model="myModel" format="number"></input>
    */
    angular
        .module('app.directive.format', [])
        .directive('format', format);

    format.$inject = ['$filter'];

    function format($filter) {
        var directive = {
            restrict: 'A',
            require:  'ngModel',
            link:     linkFunc,
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            ctrl.$formatters.unshift(formatter);
            ctrl.$parsers.unshift(parser);

            function formatter(a) {
                return $filter(attr.format)(ctrl.$modelValue);
            }
            function parser(viewValue) {
                var plainNumber = viewValue.replace(/[^\d|\-+|\.+]/g, '');
                el.val($filter(attr.format)(plainNumber));
                return plainNumber;
            }
        }
    }
})();

(function() {
    'use strict';

    /**
    * @desc Smart-table custom pagination
    * @example <page-select></page-select>
    */
    angular
        .module('app.directive.page-select', [])
        .directive('pageSelect', pageSelect);

    function pageSelect() {
        var directive = {
            restrict: 'E',
            template: '<input type="text" class="select-page" ng-model="inputPage" ng-change="selectPage(inputPage)">',
            link:     linkFunc,
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            scope.$watch('currentPage', function(c) {
                scope.inputPage = c;
            });
        }
    }
})();

(function() {
    'use strict';

    /**
    * @desc checks if a username already exists
    * @example <input ng-model="myModel" username-availability></input>
    */
    angular
        .module('app.directive.username-availability', [])
        .directive('usernameAvailability', usernameAvailability);

    usernameAvailability.$inject = ['$q', 'utilityService'];

    function usernameAvailability($q, utilityService) {
        var directive = {
            restrict: 'A',
            require:  'ngModel',
            link:     linkFunc,
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            ctrl.$asyncValidators.usernameAvailability = function(username) {
                return verifyUsername(username)
                    .then(success)
                    .catch(error);

                function verifyUsername(username) {
                    return utilityService.verifyUsername(username);
                }
                function success(response) {
                    ctrl.$setValidity('usernameAvailability', true);
                    return $q.resolve(response);
                }
                function error(response) {
                    ctrl.$setValidity('usernameAvailability', false);
                    return $q.reject(response);
                }
            };
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.account')
        .controller('AccountController', AccountController);

    AccountController.$inject = ['$scope', 'User', 'userService'];

    function AccountController($scope, User, userService) {
        var vm = this;
        vm.account          = {};
        vm.account.email    = User.email;
        vm.account.username = User.username;

        $scope.updateAccount = function() {
            var btn = $('#update-account-button').button('loading');

            return updateAccount()
                .then(success)
                .catch(error);

            function updateAccount() {
                return userService.updateUser(vm.account);
            }
            function success(response) {
                vm.updateAccountSuccess = true;
                btn.button('reset');
            }
            function error() {
                $scope.accountForm.$invalid = true;
                vm.updateAccountError = true;
                btn.button('reset');
            }
        };

        // Needs work
        // Check if current password matches
        // Hash new password in the backend
        $scope.updatePassword = function() {
            var btn = $('#update-password-button').button('loading');

            return updatePassword()
                .then(success)
                .catch(error);

            function updatePassword() {
                return userService.updatePassword(vm.account.newPassword);
            }
            function success(response) {
                vm.updatePasswordSuccess = true;
                btn.button('reset');
            }
            function error(response) {
                $scope.passwordForm.$invalid = true;
                vm.updatePasswordError = true;
                btn.button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.account')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('account', {
            url: '/account',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl:  'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/account.html',
                    controller:   'AccountController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    updateUser.$inject = ['userService', '$q'];

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    NavController.$inject = ['User'];

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.account.billing')
        .controller('BillingController', BillingController);

    BillingController.$inject = ['$scope', 'stripeService'];

    function BillingController($scope, stripeService) {
        var vm = this;
        getSubscription();

        function getSubscription() {
            return stripeService.retrieveSubscription()
                .then(showSubscription)
                .catch(error);

            function showSubscription(response) {
                vm.card = {};
                vm.card.name  = response.data.sources.data[0].name;
                vm.card.last4 = response.data.sources.data[0].last4;
                vm.card.brand = response.data.sources.data[0].brand;
                vm.plan       = response.data.subscriptions.data[0].plan.id;
            }
            function error(response) {
                vm.errorMsgGet = true;
            }
        }

        $scope.showUpdateCardModal = function() {
            vm.updatedCard = {};
            $scope.editCardForm.$setPristine();
            $('#edit-card-modal').modal('show');
        };
        $scope.updateCard = function() {
            var btn = $('#update-card-button').button('loading');
            var valid = stripeService.validateCard(vm.updatedCard);

            if (valid) {
                createToken()
                    .then(updateSubscription)
                    .then(updateSuccess)
                    .catch(error);
            } else {
                error();
            }

            function createToken() {
                return stripeService.createCardToken(vm.updatedCard);
            }
            function updateSubscription(response) {
                return stripeService.updateSubscription(response.id);
            }
            function updateSuccess(response) {
                $('#edit-card-modal').modal('hide');
                btn.button('reset');
                getSubscription();
            }
            function error() {
                $scope.editCardForm.$invalid = true;
                btn.button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.account.billing')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('billing', {
            url: '/account/billing',
            resolve: {
                User: function(userService, $q) {
                    return userService.retrieve()
                        .then(responseHandler)
                        .catch(errorHandler);

                    function responseHandler(response) {
                        return response.data;
                    }
                    function errorHandler(response) {
                        return $q.reject(response.data);
                    }
                }
            },
            views: {
                'nav': {
                    templateUrl: 'html/nav2.html',
                    controller: function($scope, User) {
                        $scope.username = User.username;
                    }
                },
                'body': {
                    templateUrl:  'html/billing.html',
                    controller:   'BillingController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.cost')
        .controller('CostController', CostController);

    CostController.$inject = ['$scope', 'store', 'categoryService', 'itemService', 'expenditureService'];

    function CostController($scope, store, categoryService, itemService, expenditureService) {
        var vm = this;
        vm.project = store.get('project');
        showCategories();

        // GET function
        function showCategories() {
            return getCategories()
                .then(populateTable)
                .catch(error);

            function getCategories() {
                return categoryService.retrieveList()
                    .then(success)
                    .catch(error);

                function success(response) {
                    vm.categoryList = response.data.objects;
                    return vm.categoryList;
                }
            }
            function populateTable() {
                var grandTotalEstimated = 0;
                var grandTotalActual    = 0;

                angular.forEach(vm.categoryList, function(category) {
                    var totalEstimated = 0;
                    var totalActual    = 0;
                    angular.forEach(category.items, function(item) {
                        totalEstimated += item.estimated;
                        totalActual    += item.actual;
                    });
                    category.totalEstimated = totalEstimated;
                    category.totalActual    = totalActual;
                    grandTotalEstimated += totalEstimated;
                    grandTotalActual    += totalActual;
                });
                vm.grandTotalEstimated = grandTotalEstimated;
                vm.grandTotalActual    = grandTotalActual;
            }
            function error(response) {
                vm.errorGet = true;
            }
        }

        // CLICKED function
        $scope.clickedCheckbox = function(category) {
            var isSelected = false;
            angular.forEach(category.items, function(item) {
                if (item.selected) {
                    isSelected = true;
                }
            });
            vm.selected = isSelected;
        };

        // ADD Item functions
        $scope.addItemModal = function() {
            vm.item           = {};
            vm.item.estimated = 0;
            vm.item.actual    = 0;
            $scope.addItemForm.$setPristine();
            $('#add-item-button').button('reset');
            $('#add-item-modal').modal('show');
        };
        $scope.addItem = function() {
            $('#add-item-button').button('loading');

            if (vm.item.newCategory) {
                return addCategory()
                    .then(newCategory)
                    .then(addItem)
                    .then(success)
                    .catch(error);
            } else {
                return addItem()
                    .then(success)
                    .catch(error);
            }

            function addCategory() {
                return categoryService.create(vm.item.newCategory);
            }
            function newCategory(response) {
                vm.item.category = response.data.id;
            }
            function addItem() {
                return itemService.create(vm.item);
            }
            function success() {
                $('#add-item-modal').modal('hide');
                showCategories();
            }
            function error() {
                $scope.addItemForm.$invalid = true;
                $('#add-item-button').button('reset');
            }
        };

        // DELETE MANY Items functions
        $scope.deleteManyItemsModal = function() {
            if (!$('#delete-button').hasClass('disabled')) {
                vm.errorDeleteManyItems = false;
                $('#delete-many-items-button').button('reset');
                $('#delete-many-items-modal').modal('show');
            }
        };
        $scope.deleteManyItems = function() {
            $('#delete-many-items-button').button('loading');

            angular.forEach(vm.categoryList, function(category) {
                angular.forEach(category.items, function(item) {
                    if (item.selected) {
                        return deleteItem(item)
                            .then(success)
                            .catch(error);
                    }
                });
            });

            function deleteItem(item) {
                return itemService.remove(item);
            }
            function success() {
                $('#delete-many-items-modal').modal('hide');
                vm.selected = false;
                showCategories();
            }
            function error() {
                vm.errorDeleteManyItems = true;
                $('#delete-many-items-button').button('reset');
            }
        };

        // DELETE Item functions
        $scope.deleteItemModal = function(item) {
            vm.errorDeleteItem = false;
            vm.item = {};
            vm.item = item;
            $('#delete-item-button').button('reset');
            $('#delete-item-modal').modal('show');
        };
        $scope.deleteItem = function() {
            $('#delete-item-button').button('loading');

            return deleteItem()
                .then(success)
                .catch(error);

            function deleteItem() {
                return itemService.remove(vm.item);
            }
            function success() {
                $('#delete-item-modal').modal('hide');
                showCategories();
            }
            function error() {
                vm.errorDeleteItem = true;
                $('#delete-item-button').button('reset');
            }
        };

        // UPDATE Item functions
        $scope.updateItemModal = function(category, item) {
            vm.item             = {};
            vm.item.id          = item.id;
            vm.item.category    = {
                id:   category.id,
                name: category.name
            };
            vm.item.name        = item.name;
            vm.item.description = item.description;
            vm.item.estimated   = item.estimated;
            vm.item.actual      = item.actual;
            $scope.updateItemForm.$setPristine();
            $('#update-item-button').button('reset');
            $('#update-item-modal').modal('show');
        };
        $scope.updateItem = function() {
            $('#update-item-button').button('loading');

            return updateItem()
                .then(success)
                .catch(error);

            function updateItem() {
                return itemService.update(vm.item);
            }
            function success() {
                $('#update-item-modal').modal('hide');
                showCategories();
            }
            function error() {
                $scope.updateItemForm.$invalid = true;
                $('#update-item-button').button('reset');
            }
        };

        // DELETE Category functions
        $scope.deleteCategoryModal = function(category) {
            vm.errorDeleteCategory = false;
            vm.category = {};
            vm.category = category;
            $('#delete-category-button').button('reset');
            $('#delete-category-modal').modal('show');
        };
        $scope.deleteCategory = function() {
            $('#delete-category-button').button('loading');
            var expenditures = 0;
            var items = 0;

            return getExpenditures()
                .then(setExpenditures)
                .then(getItems)
                .then(setItems)
                .then(checkCategory)
                .then(success)
                .catch(error);

            function getExpenditures() {
                return expenditureService.retrieveByCategory(vm.category);
            }
            function setExpenditures(response) {
                expenditures = response.data.num_results;
            }
            function getItems() {
                return itemService.retrieveByCategory(vm.category);
            }
            function setItems(response) {
                items = response.data.num_results;
            }
            function checkCategory() {
                if (expenditures === 0 && items === 0) {
                    return deleteCategory();
                }
                else if (expenditures !== 0 && items !== 0) {
                    return deleteExpenditures()
                        .then(deleteItems)
                        .then(deleteCategory);
                }
                else if (expenditures !== 0 && items === 0) {
                    return deleteExpenditures()
                        .then(deleteCategory);
                }
                else {
                    return deleteItems()
                        .then(deleteCategory);
                }
            }
            function deleteExpenditures() {
                return expenditureService.removeByCategory(vm.category);
            }
            function deleteItems() {
                return itemService.removeByCategory(vm.category);
            }
            function deleteCategory() {
                return categoryService.remove(vm.category);
            }
            function success() {
                $('#delete-category-modal').modal('hide');
                showCategories();
            }
            function error() {
                vm.errorDeleteCategory = true;
                $('#delete-category-button').button('reset');
            }
        };

        // UPDATE Category functions
        $scope.updateCategoryModal = function(category) {
            vm.category      = {};
            vm.category.id   = category.id;
            vm.category.name = category.name;
            $scope.updateCategoryForm.$setPristine();
            $('#update-category-button').button('reset');
            $('#update-category-modal').modal('show');
        };
        $scope.updateCategory = function() {
            $('#update-category-button').button('loading');

            return updateCategory()
                .then(success)
                .catch(error);

            function updateCategory() {
                return categoryService.update(vm.category);
            }
            function success() {
                $('#update-category-modal').modal('hide');
                showCategories();
            }
            function error() {
                $scope.updateCategoryForm.$invalid = true;
                $('#update-category-button').button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.cost')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('cost', {
            url: '/projects/cost',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl:  'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/cost.html',
                    controller:   'CostController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    updateUser.$inject = ['userService', '$q'];

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    NavController.$inject = ['User'];

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.expenditures')
        .controller('ExpendituresController', ExpendituresController);

    ExpendituresController.$inject = ['$scope', 'store', '$filter', 'expenditureService', 'subcontractorService', 'itemService', 'fundService'];

    function ExpendituresController($scope, store, $filter, expenditureService, subcontractorService, itemService, fundService) {
        var vm = this;
        vm.project = store.get('project');
        showExpenditures();
        setSubcontractors();
        setItems();
        setFunds();

        // GET Expenditures
        function showExpenditures() {
            return getExpenditures();

            function getExpenditures() {
                return expenditureService.retrieveList()
                    .then(success)
                    .catch(error);

                function success(response) {
                    vm.expenditureList = response.data.objects;
                    return vm.expenditureList;
                }
                function error() {
                    vm.errorGet = true;
                }
            }
        }

        // GET Subcontractors
        function setSubcontractors() {
            return getSubcontractors();

            function getSubcontractors() {
                return subcontractorService.retrieveList()
                    .then(success)
                    .catch(error);

                function success(response) {
                    vm.subcontractorList = response.data.objects;
                    return vm.subcontractorList;
                }
                function error() {
                    vm.errorGet = true;
                }
            }
        }

        // GET Items
        function setItems() {
            return getItems()
                .then(populateList)
                .catch(error);

            function getItems() {
                return itemService.retrieveList()
                    .then(success)
                    .catch(error);

                function success(response) {
                    vm.itemList = response.data.objects;
                    return vm.itemList;
                }
            }
            function populateList() {
                var list = [];
                angular.forEach(vm.itemList, function(item) {
                    list.push({
                        id  : item.id,
                        name: item.name,
                        category: {
                            id  : item.categories.id,
                            name: item.categories.name,
                        }
                    });
                });
                vm.itemList = list;
                return vm.itemList;
            }
            function error() {
                vm.errorGet = true;
            }
        }

        // GET Funds
        function setFunds() {
            return getFunds()
                .then(populateList)
                .catch(error);

            function getFunds() {
                return fundService.retrieveList()
                    .then(success)
                    .catch(error);

                function success(response) {
                    vm.fundList = response.data.objects;
                    return vm.fundList;
                }
            }
            function populateList() {
                var list = [];
                angular.forEach(vm.fundList, function(fund) {
                    list.push({
                        id  : fund.id,
                        name: fund.name
                    });
                });
                vm.fundList = list;
                return vm.fundList;
            }
            function error() {
                vm.errorGet = true;
            }
        }

        // CLICKED function
        $scope.clickedCheckbox = function() {
            var isSelected = false;
            angular.forEach(vm.expenditureList, function(expenditure) {
                if (expenditure.selected) {
                    isSelected = true;
                }
            });
            vm.selected = isSelected;
        };

        // ADD functions
        $scope.addModal = function() {
            vm.expenditure      = {};
            vm.expenditure.date = new Date();
            $scope.addForm.$setPristine();
            $('#add-button').button('reset');
            $('#add-modal').modal('show');
        };
        $scope.add = function() {
            $('#add-button').button('loading');

            if (vm.expenditure.question == 1) {
                vm.expenditure.company = vm.expenditure.subcontractor.company;
            }

            return addExpenditure()
                .then(success)
                .catch(error);

            function addExpenditure() {
                return expenditureService.create(vm.expenditure);
            }
            function success() {
                $('#add-modal').modal('hide');
                showExpenditures();
            }
            function error() {
                $scope.addForm.$invalid = true;
                $('#add-button').button('reset');
            }
        };

        // DELETE MANY functions
        $scope.deleteManyModal = function() {
            if (!$('#delete-many-button1').hasClass('disabled')) {
                vm.errorDeleteMany = false;
                $('#delete-many-button2').button('reset');
                $('#delete-many-modal').modal('show');
            }
        };
        $scope.deleteMany = function() {
            $('#delete-many-button2').button('loading');

            angular.forEach(vm.expenditureList, function(expenditure) {
                if (expenditure.selected) {
                    return deleteExpenditure(expenditure)
                        .then(success)
                        .catch(error);
                }
            });

            function deleteExpenditure(expenditure) {
                return expenditureService.remove(expenditure);
            }
            function success() {
                $('#delete-many-modal').modal('hide');
                vm.selected = false;
                showExpenditures();
            }
            function error() {
                vm.errorDeleteMany = true;
                $('#delete-many-button2').button('reset');
            }
        };

        // DELETE functions
        $scope.deleteModal = function(expenditure) {
            vm.errorDelete = false;
            vm.expenditure = {};
            vm.expenditure.id = expenditure.id;
            $('#delete-button').button('reset');
            $('#delete-modal').modal('show');
        };
        $scope.delete = function() {
            $('#delete-button').button('loading');

            return deleteExpenditure()
                .then(success)
                .catch(error);

            function deleteExpenditure() {
                return expenditureService.remove(vm.expenditure);
            }
            function success() {
                $('#delete-modal').modal('hide');
                showExpenditures();
            }
            function error() {
                vm.errorDelete = true;
                $('#delete-button').button('reset');
            }
        };

        // UPDATE functions
        $scope.updateModal = function(expenditure) {
            var date = new Date(expenditure.date);

            vm.expenditure         = {};
            vm.expenditure.id      = expenditure.id;
            vm.expenditure.date    = new Date(date.getTime() + date.getTimezoneOffset() * 60000);
            vm.expenditure.company = expenditure.company;
            vm.expenditure.item    = {
                id  : expenditure.items.id,
                name: expenditure.items.name,
                category: {
                    id  : expenditure.categories.id,
                    name: expenditure.categories.name,
                }
            };
            vm.expenditure.notes = expenditure.notes;
            vm.expenditure.cost  = expenditure.cost;
            vm.expenditure.fund  = {
                id:   expenditure.funds.id,
                name: expenditure.funds.name
            };
            $scope.updateForm.$setPristine();
            $('#update-button').button('reset');
            $('#update-modal').modal('show');
        };
        $scope.update = function() {
            $('#update-button').button('loading');

            return updateExpenditure()
                .then(success)
                .catch(error);

            function updateExpenditure() {
                return expenditureService.update(vm.expenditure);
            }
            function success() {
                $('#update-modal').modal('hide');
                showExpenditures();
            }
            function error() {
                $scope.updateForm.$invalid = true;
                $('#update-button').button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.expenditures')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('expenditures', {
            url: '/projects/expenditures',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl:  'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/expenditures.html',
                    controller:   'ExpendituresController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    updateUser.$inject = ['userService', '$q'];

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    NavController.$inject = ['User'];

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.funds')
        .controller('FundsController', FundsController);

    FundsController.$inject = ['$scope', 'store', 'fundService', 'drawService'];

    function FundsController($scope, store, fundService, drawService) {
        var vm = this;
        vm.project = store.get('project');
        showFunds();

        // GET function
        function showFunds() {
            return getFunds()
                .then(updateTable)
                .catch(error);

            function getFunds() {
                return fundService.retrieveList()
                    .then(success)
                    .catch(error);

                function success(response) {
                    vm.fundList = response.data.objects;
                    return vm.fundList;
                }
            }
            function updateTable() {
                angular.forEach(vm.fundList, function(fund) {
                    var totalExpenditure = 0;
                    var totalDraw        = 0;
                    angular.forEach(fund.expenditures, function(expenditure) {
                        totalExpenditure += expenditure.cost;
                    });
                    angular.forEach(fund.draws, function(draw) {
                        totalDraw += draw.amount;
                    });
                    fund.totalExpenditure = totalExpenditure;
                    fund.totalDraw        = totalDraw;
                    fund.spent            = Math.round(totalExpenditure / fund.amount * 100);
                    fund.left             = Math.round((fund.amount - totalExpenditure) / fund.amount * 100);
                    fund.drawReceived     = Math.round(totalDraw / fund.amount * 100);
                    fund.drawLeft         = Math.round((fund.amount - totalDraw) / fund.amount * 100);
                });
            }
            function error(response) {
                vm.errorGet = true;
            }
        }

        // CLICKED functions
        $scope.clickedFund = function(fund) {
            var index = vm.fundList.indexOf(fund);
            if (index !== -1) {
                store.set('fund', fund);
                return true;
            }
            return false;
        };
        $scope.clickedDraw = function(draw) {
            var index = store.get('fund').draws.indexOf(draw);
            if (index !== -1) {
                store.set('draw', draw);
                return true;
            }
            return false;
        };
        $scope.clickedAllCheckbox = function() {
            angular.forEach(store.get('fund').draws, function(draw) {
                draw.selected = store.get('fund').checkboxAll;
                store.get('fund').selected = draw.selected;
            });
        };
        $scope.clickedCheckbox = function(draw) {
            if (draw.selected) {
                store.get('fund').selected = true;
            } else {
                var isSelected = false;
                angular.forEach(store.get('fund').draws, function(d) {
                    if (d.selected) {
                        isSelected = true;
                    }
                });
                store.get('fund').selected = isSelected;
            }
        };

        // ADD Fund
        $scope.addFundModal = function() {
            vm.fund = {};
            vm.loanQuestion = [{ value: true, name: 'Yes' }, { value: false, name: 'No' }];
            $scope.addFundForm.$setPristine();
            $('#add-fund-button').button('reset');
            $('#add-fund-modal').modal('show');
        };
        $scope.addFund = function() {
            $('#add-fund-button').button('loading');

            return addFund()
                .then(success)
                .catch(error);

            function addFund() {
                return fundService.create(vm.fund);
            }
            function success() {
                $('#add-fund-modal').modal('hide');
                showFunds();
            }
            function error() {
                $scope.addFundForm.$invalid = true;
                $('#add-fund-button').button('reset');
            }
        };

        // DELETE Fund
        $scope.deleteFundModal = function(fund) {
            vm.errorDeleteFund = false;
            vm.fund = {};
            vm.fund = fund;
            $('#delete-fund-button').button('reset');
            $('#delete-fund-modal').modal('show');
        };
        $scope.deleteFund = function() {
            $('#delete-fund-button').button('loading');

            if (vm.fund.draws.length === 0) {
                return deleteFund()
                    .then(success)
                    .catch(error);
            } else {
                return deleteDraws()
                    .then(deleteFund)
                    .then(success)
                    .catch(error);
            }

            function deleteDraws() {
                return drawService.removeByFund(vm.fund);
            }
            function deleteFund() {
                return fundService.remove(vm.fund);
            }
            function success() {
                $('#delete-fund-modal').modal('hide');
                showFunds();
            }
            function error(response) {
                vm.errorDeleteFund = true;
                $('#delete-fund-button').button('reset');
            }
        };

        // UPDATE Fund
        $scope.updateFundModal = function(fund) {
            vm.fund        = {};
            vm.fund.id     = fund.id;
            vm.fund.name   = fund.name;
            vm.fund.amount = fund.amount;
            $scope.updateFundForm.$setPristine();
            $('#update-fund-button').button('reset');
            $('#update-fund-modal').modal('show');
        };
        $scope.updateFund = function() {
            $('#update-fund-button').button('loading');

            return updateFund()
                .then(success)
                .catch(error);

            function updateFund() {
                return fundService.update(vm.fund);
            }
            function success() {
                $('#update-fund-modal').modal('hide');
                showFunds();
            }
            function error() {
                $scope.updateFundForm.$invalid = true;
                $('#update-fund-button').button('reset');
            }
        };

        // ADD Draw
        $scope.showAddDrawModal = function() {
            vm.draw      = {};
            vm.draw.date = new Date();
            $scope.addDrawForm.$setPristine();
            $('#add-draw-modal').modal('show');
        };
        $scope.addDraw = function() {
            var btn = $('#add-draw-button').button('loading');

            addDraw()
                .then(addSuccess)
                .catch(error);

            function addDraw() {
                return drawService.create(vm.draw);
            }
            function addSuccess(response) {
                $('#add-draw-modal').modal('hide');
                btn.button('reset');
                showFunds();
            }
            function error(response) {
                $scope.addDrawForm.$invalid = true;
                btn.button('reset');
            }
        };

        $scope.showDeleteDrawsModal = function() {
            if (store.get('fund').selected) {
                vm.errorMsgDeleteDraws = false;
                $('#delete-draws-modal').modal('show');
            }
        };
        $scope.deleteDraws = function() {
            var btn = $('#delete-draw-button').button('loading');

            angular.forEach(store.get('fund').draws, function(draw) {
                if (draw.selected) {
                    deleteDraw(draw.id)
                        .then(deleteSuccess)
                        .catch(error);
                }
            });

            function deleteDraw(draw_id) {
                return drawService.remove(draw_id);
            }
            function deleteSuccess(response) {
                $('#delete-draws-modal').modal('hide');
                btn.button('reset');
                showFunds();
            }
            function error(response) {
                vm.errorMsgDeleteDraws = true;
                btn.button('reset');
            }
        };

        $scope.showEditDrawModal = function() {
            vm.updatedDraw        = {};
            vm.updatedDraw.date   = new Date(store.get('draw').date);
            vm.updatedDraw.amount = store.get('draw').amount;
            $scope.editDrawForm.$setPristine();
            $('#edit-draw-modal').modal('show');
        };
        $scope.updateDraw = function() {
            var btn = $('#update-draw-button').button('loading');

            updateDraw()
                .then(updateSuccess)
                .catch(error);

            function updateDraw() {
                return drawService.update(vm.updatedDraw);
            }
            function updateSuccess(response) {
                $('#edit-draw-modal').modal('hide');
                btn.button('reset');
                showFunds();
            }
            function error(response) {
                $scope.editDrawForm.$invalid = true;
                btn.button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.funds')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('funds', {
            url: '/projects/funds',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl: 'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/funds.html',
                    controller:   'FundsController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    updateUser.$inject = ['userService', '$q'];

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    NavController.$inject = ['User'];

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.home')
        .controller('HomeController', HomeController);

    HomeController.$inject = ['store'];

    function HomeController(store) {
        var vm = this;
        store.remove('jwt');
    }
})();

(function() {
    'use strict';

    angular
        .module('app.home')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('home', {
            url: '/',
            views: {
                'nav': {
                    templateUrl: 'html/nav1.html'
                },
                'body': {
                    templateUrl:  'html/home.html',
                    controller:   'HomeController',
                    controllerAs: 'vm'
                }
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('app.login')
        .controller('LoginController', LoginController);

    LoginController.$inject = ['$scope', 'store', '$state', 'authService'];

    function LoginController($scope, store, $state, authService) {
        var vm = this;
        store.remove('jwt');

        $scope.logIn = function() {
            $('#login-button').button('loading');

            return authenticateUser()
                .then(goProjects)
                .catch(error);

            function authenticateUser() {
                return authService.authenticate(vm.username, vm.password);
            }
            function goProjects() {
                $state.go('projects');
            }
            function error() {
                $scope.loginForm.$invalid = true;
                vm.password = '';
                $('#login-button').button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.login')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('login', {
            url: '/login',
            views: {
                'nav': {
                    templateUrl: 'html/nav1.html'
                },
                'body': {
                    templateUrl:  'html/login.html',
                    controller:   'LoginController',
                    controllerAs: 'vm'
                }
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.overview')
        .controller('OverviewController', OverviewController);

    OverviewController.$inject = ['store', 'chartService', 'categoryService', 'fundService'];

    function OverviewController(store, chartService, categoryService, fundService) {
        var vm = this;
        vm.project = store.get('project');
        var options = chartService.setPieChartOptions();
        showCategories();
        showFunds();

        // GET Categories
        function showCategories() {
            return getCategories()
                .then(populateProgressBars)
                .then(populatePieChart)
                .then(populateTable)
                .catch(error);

            function getCategories() {
                return categoryService.retrieveList()
                    .then(success)
                    .catch(error);

                    function success(response) {
                        vm.categoryList = response.data.objects;
                        return vm.categoryList;
                    }
            }
            function populateProgressBars() {
                angular.forEach(vm.categoryList, function(category) {
                    var totalExpenditure = 0;
                    var totalBudget = 0;
                    angular.forEach(category.expenditures, function(expenditure) {
                        totalExpenditure += expenditure.cost;
                    });
                    angular.forEach(category.items, function(item) {
                        totalBudget += item.actual;
                    });
                    category.totalExpenditure = totalExpenditure;
                    category.totalBudget = totalBudget;

                    if (totalBudget === 0 && totalBudget < totalExpenditure) {
                        category.spent = 100;
                        category.left  = 0;
                    } else {
                        category.spent = Math.round(totalExpenditure / totalBudget * 100);
                        category.left  = Math.round((totalBudget - totalExpenditure) / totalBudget * 100);
                    }
                });
            }
            function populatePieChart() {
                options.series[0].data = [];

                if (vm.categoryList.length === 0) {
                    options.series[0].data.push({ name: 'No Data', y: 0.01 });
                } else {
                    angular.forEach(vm.categoryList, function(category) {
                        if (category.items.length !== 0) {
                            var categoryTotal = 0;
                            angular.forEach(category.items, function(item) {
                                categoryTotal += item.actual;
                            });
                            options.series[0].data.push({ name: category.name, y: categoryTotal });
                        }
                    });
                }
                $('#piechart-container').highcharts(options);
            }
            function populateTable() {
                var grandTotalEstimated   = 0;
                var grandTotalActual      = 0;
                var grandTotalExpenditure = 0;

                angular.forEach(vm.categoryList, function(category) {
                    var totalEstimated   = 0;
                    var totalActual      = 0;
                    var totalExpenditure = 0;
                    angular.forEach(category.items, function(item) {
                        totalEstimated += item.estimated;
                        totalActual    += item.actual;
                    });
                    angular.forEach(category.expenditures, function(expenditure) {
                        totalExpenditure += expenditure.cost;
                    });
                    category.totalEstimated   = totalEstimated;
                    category.totalActual      = totalActual;
                    category.totalExpenditure = totalExpenditure;
                    grandTotalEstimated   += totalEstimated;
                    grandTotalActual      += totalActual;
                    grandTotalExpenditure += totalExpenditure;

                    if (totalExpenditure >= totalActual) {
                        category.paid   = 100;
                        category.unpaid = 0;
                    } else {
                        category.paid   = Math.round(totalExpenditure / totalActual * 100);
                        category.unpaid = totalActual - totalExpenditure;
                    }
                });
                vm.grandTotalEstimated   = grandTotalEstimated;
                vm.grandTotalActual      = grandTotalActual;
                vm.grandTotalExpenditure = grandTotalExpenditure;
                vm.grandTotalSpent = Math.round(grandTotalExpenditure / grandTotalActual * 100);
                vm.grandTotalLeft  = Math.round((grandTotalActual - grandTotalExpenditure) / grandTotalActual * 100);
            }
        }

        // GET Funds
        function showFunds() {
            return getFunds()
                .then(populateProgressBars)
                .catch(error);

            function getFunds() {
                return fundService.retrieveList()
                    .then(success)
                    .catch(error);

                    function success(response) {
                        vm.fundList = response.data.objects;
                        return vm.fundList;
                    }
            }
            function populateProgressBars() {
                angular.forEach(vm.fundList, function(fund) {
                    var totalExpenditure = 0;
                    var totalDraw        = 0;
                    angular.forEach(fund.expenditures, function(expenditure) {
                        totalExpenditure += expenditure.cost;
                    });
                    angular.forEach(fund.draws, function(draw) {
                        totalDraw += draw.amount;
                    });
                    fund.totalExpenditure = totalExpenditure;
                    fund.totalDraw        = totalDraw;
                    fund.spent            = Math.round(totalExpenditure / fund.amount * 100);
                    fund.left             = Math.round((fund.amount - totalExpenditure) / fund.amount * 100);
                    fund.drawReceived     = Math.round(totalDraw / fund.amount * 100);
                    fund.drawLeft         = Math.round((fund.amount - totalDraw) / fund.amount * 100);
                });
            }
        }

        // Error
        function error() {
            vm.errorGet = true;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.overview')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('overview', {
            url: '/projects/overview',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl:  'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/overview.html',
                    controller:   'OverviewController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    updateUser.$inject = ['userService', '$q'];

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    NavController.$inject = ['User'];

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects')
        .controller('ProjectsController', ProjectsController);

    ProjectsController.$inject = ['$scope', 'store', 'projectService', 'utilityService'];

    function ProjectsController($scope, store, projectService, utilityService) {
        var vm = this;
        showProjects();

        // GET function
        function showProjects() {
            return getProjects()
                .then(success)
                .catch(error);

            function getProjects() {
                return projectService.retrieveList();
            }
            function success(response) {
                vm.projectList = response.data.objects;
                return vm.projectList;
            }
            function error(response) {
                vm.errorGet = true;
            }
        }

        // CLICKED function
        $scope.clicked = function(project) {
            var index = vm.projectList.indexOf(project);
            if (index !== -1) {
                store.set('project', project);
                return true;
            }
            return false;
        };

        // ADD functions
        $scope.addModal = function() {
            vm.project = {};
            $scope.addForm.$setPristine();
            $('#add-button').button('reset');
            $('#add-modal').modal('show');
        };
        $scope.add = function() {
            $('#add-button').button('loading');

            if ($('#project-file').length && $('#project-file')[0].files[0]) {
                return parseFile()
                    .then(success)
                    .catch(error);
            } else {
                return createProject()
                    .then(success)
                    .catch(error);
            }

            function parseFile() {
                var file = $('#project-file')[0].files[0];
                return utilityService.parseUbuilditFile(vm.project, file);
            }
            function createProject() {
                return projectService.create(vm.project);
            }
            function success(response) {
                $('#add-modal').modal('hide');
                showProjects();
            }
            function error(response) {
                $scope.addForm.$invalid = true;
                $('#add-button').button('reset');
            }
        };

        // DELETE functions
        $scope.deleteModal = function(project) {
            vm.errorDelete = false;
            vm.deleted = project;
            $('#delete-button').button('reset');
            $('#delete-modal').modal('show');
        };
        $scope.delete = function() {
            $('#delete-button').button('loading');

            return deleteProject()
                .then(success)
                .catch(error);

            function deleteProject() {
                return projectService.remove(vm.deleted);
            }
            function success(response) {
                $('#delete-modal').modal('hide');
                showProjects();
            }
            function error(response) {
                vm.errorDelete = true;
                $('#delete-button').button('reset');
            }
        };

        // UPDATE functions
        $scope.updateModal = function(project) {
            vm.project         = {};
            vm.project.id      = project.id;
            vm.project.name    = project.name;
            vm.project.address = project.address;
            vm.project.city    = project.city;
            vm.project.state   = project.state;
            vm.project.zipcode = project.zipcode;
            vm.project.homeSq  = project.home_sq;
            $scope.updateForm.$setPristine();
            $('#update-button').button('reset');
            $('#update-modal').modal('show');
        };
        $scope.update = function() {
            $('#update-button').button('loading');

            return updateProject()
                .then(success)
                .catch(error);

            function updateProject() {
                return projectService.update(vm.project);
            }
            function success() {
                $('#update-modal').modal('hide');
                showProjects();
            }
            function error() {
                $scope.updateForm.$invalid = true;
                $('#update-button').button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('projects', {
            url: '/projects',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl:  'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/projects.html',
                    controller:   'ProjectsController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    updateUser.$inject = ['userService', '$q'];

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    NavController.$inject = ['User'];

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.signup')
        .controller('SignupController', SignupController);

    SignupController.$inject = ['$scope', 'store', '$state', 'userService', 'authService'];

    function SignupController($scope, store, $state, userService, authService) {
        var vm = this;
        vm.plan = 'free';
        store.remove('jwt');

        $scope.signUp = function() {
            var btn = $('#signup-button').button('loading');

            return createUser()
                .then(authenticateUser)
                .then(goTutorial)
                .catch(error);

            function createUser() {
                return userService.create(vm);
            }
            function authenticateUser() {
                return authService.authenticate(vm.username, vm.password);
            }
            function goTutorial() {
                $state.go('tutorial');
            }
            function error() {
                $scope.signupForm.$invalid = true;
                btn.button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.signup')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('signup', {
            url: '/signup',
            views: {
                'nav': {
                    templateUrl: 'html/nav1.html'
                },
                'body': {
                    templateUrl:  'html/signup.html',
                    controller:   'SignupController',
                    controllerAs: 'vm'
                }
            }
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.subcontractors')
        .controller('SubcontractorsController', SubcontractorsController);

    SubcontractorsController.$inject = ['$scope', 'store', 'subcontractorService'];

    function SubcontractorsController($scope, store, subcontractorService) {
        var vm = this;
        vm.project = store.get('project');
        showSubcontractors();

        // GET function
        function showSubcontractors() {
            return getSubcontractors();

            function getSubcontractors() {
                return subcontractorService.retrieveList()
                    .then(success)
                    .catch(error);

                function success(response) {
                    vm.subcontractorList = response.data.objects;
                    return vm.subcontractorList;
                }
                function error() {
                    vm.errorGet = true;
                }
            }
        }

        // CLICKED function
        $scope.clickedCheckbox = function() {
            var isSelected = false;
            angular.forEach(vm.subcontractorList, function(subcontractor) {
                if (subcontractor.selected) {
                    isSelected = true;
                }
            });
            vm.selected = isSelected;
        };

        // ADD functions
        $scope.addModal = function() {
            vm.subcontractor = {};
            $scope.addForm.$setPristine();
            $('#add-button').button('reset');
            $('#add-modal').modal('show');
        };
        $scope.add = function() {
            $('#add-button').button('loading');

            return addSubcontractor()
                .then(success)
                .catch(error);

            function addSubcontractor() {
                return subcontractorService.create(vm.subcontractor);
            }
            function success() {
                $('#add-modal').modal('hide');
                showSubcontractors();
            }
            function error() {
                $scope.addForm.$invalid = true;
                $('#add-button').button('reset');
            }
        };

        // DELETE MANY functions
        $scope.deleteManyModal = function() {
            if (!$('#delete-many-button1').hasClass('disabled')) {
                vm.errorDeleteMany = false;
                $('#delete-many-button2').button('reset');
                $('#delete-many-modal').modal('show');
            }
        };
        $scope.deleteMany = function() {
            $('#delete-many-button2').button('loading');

            angular.forEach(vm.subcontractorList, function(subcontractor) {
                if (subcontractor.selected) {
                    return deleteSubcontractor(subcontractor)
                        .then(success)
                        .catch(error);
                }
            });

            function deleteSubcontractor(subcontractor) {
                return subcontractorService.remove(subcontractor);
            }
            function success() {
                $('#delete-many-modal').modal('hide');
                vm.selected = false;
                showSubcontractors();
            }
            function error() {
                vm.errorDeleteMany = true;
                $('#delete-many-button2').button('reset');
            }
        };

        // DELETE functions
        $scope.deleteModal = function(subcontractor) {
            vm.errorDelete = false;
            vm.subcontractor = {};
            vm.subcontractor = subcontractor;
            $('#delete-button').button('reset');
            $('#delete-modal').modal('show');
        };
        $scope.delete = function() {
            $('#delete-button').button('loading');

            return deleteSubcontractor()
                .then(success)
                .catch(error);

            function deleteSubcontractor() {
                return subcontractorService.remove(vm.subcontractor);
            }
            function success() {
                $('#delete-modal').modal('hide');
                showSubcontractors();
            }
            function error() {
                vm.errorDelete = true;
                $('#delete-button').button('reset');
            }
        };

        // UPDATE functions
        $scope.updateModal = function(subcontractor) {
            vm.subcontractor         = {};
            vm.subcontractor.id      = subcontractor.id;
            vm.subcontractor.company = subcontractor.company;
            vm.subcontractor.person  = subcontractor.person;
            vm.subcontractor.number  = subcontractor.number;
            $scope.updateForm.$setPristine();
            $('#update-button').button('reset');
            $('#update-modal').modal('show');
        };
        $scope.update = function() {
            $('#update-button').button('loading');

            return updateSubcontractor()
                .then(success)
                .catch(error);

            function updateSubcontractor() {
                return subcontractorService.update(vm.subcontractor);
            }
            function success() {
                $('#update-modal').modal('hide');
                showSubcontractors();
            }
            function error() {
                $scope.updateForm.$invalid = true;
                $('#update-button').button('reset');
            }
        };
    }
})();

(function() {
    'use strict';

    angular
        .module('app.projects.subcontractors')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('subcontractors', {
            url: '/projects/subcontractors',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl:  'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/subcontractors.html',
                    controller:   'SubcontractorsController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    updateUser.$inject = ['userService', '$q'];

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    NavController.$inject = ['User'];

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.tutorial')
        .controller('TutorialController', TutorialController);

    function TutorialController() {
        var vm = this;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.tutorial')
        .config(route);

    route.$inject = ['$stateProvider'];

    function route($stateProvider) {
        $stateProvider.state('tutorial', {
            url: '/tutorial',
            resolve: {
                User: updateUser
            },
            views: {
                'nav': {
                    templateUrl:  'html/nav2.html',
                    controller:   NavController,
                    controllerAs: 'vm'
                },
                'body': {
                    templateUrl:  'html/tutorial.html',
                    controller:   'TutorialController',
                    controllerAs: 'vm'
                }
            },
            data: {
                requiresLogin: true
            }
        });
    }

    function updateUser(userService, $q) {
        return getUser()
            .then(success)
            .catch(error);

        function getUser() {
            return userService.retrieve();
        }
        function success(response) {
            return $q.resolve(response.data);
        }
        function error(response) {
            return $q.reject(response);
        }
    }

    function NavController(User) {
        var vm = this;
        vm.username = User.username;
    }
})();

/**
 * @ngdoc service
 * @name authService
 * @description
 *
 * This is the service module for Auth.
**/
(function() {
    'use strict';

    angular
        .module('app.service.auth', [])
        .factory('authService', authService);

    authService.$inject = ['$http', 'store', 'jwtHelper', '$q', 'API_URL'];

    function authService($http, store, jwtHelper, $q, API_URL) {
        var url = API_URL + '/api/auth';
        var service = {
            authenticate: authenticate
        };
        return service;

        function authenticate(login, password) {
            var data = {
                login:    login,
                password: password
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);

            function success(response) {
                var token   = response.data.token;
                var payload = jwtHelper.decodeToken(token);
                // var user    = {
                //     id:     payload.user_id,
                //     stripe: payload.stripe_id
                // };
                var user = {
                    id: payload.user_id
                };
                store.set('jwt', token);
                store.set('user', user);
                return $q.resolve(response);
            }
            function error(response) {
                return $q.reject(response);
            }
        }
    }
})();

/**
 * @ngdoc service
 * @name categoryService
 * @description
 *
 * This is the service module for Category.
**/
(function() {
    'use strict';

    angular
        .module('app.service.category', [])
        .factory('categoryService', categoryService);

    categoryService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function categoryService($http, store, $q, API_URL) {
        var url = API_URL + '/api/categories';
        var service = {
            retrieveList: retrieveList,
            create:       create,
            update:       update,
            remove:       remove
        };
        return service;

        function retrieveList() {
			return $http.get(url + query('project_id', 'equals', store.get('project').id))
                .then(success)
                .catch(error);
        }

        function create(name) {
            var data = {
                name:       name,
                project_id: store.get('project').id
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function update(category) {
            var data = {
                name:       category.name,
                project_id: store.get('project').id
            };
            return $http.put(url + '/' + category.id, data)
                .then(success)
                .catch(error);
        }

        function remove(category) {
            return $http.delete(url + '/' + category.id)
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
        function query(name, op, val) {
            return '?q={"filters":[{"name":"' + name + '","op":"' + op + '","val":"' + val + '"}]}';
        }
    }
})();

/**
 * @ngdoc service
 * @name chartService
 * @description
 *
 * This is the service module for Chart.
**/
(function() {
    'use strict';

    angular
        .module('app.service.chart', [])
        .factory('chartService', chartService);

    function chartService() {
        var service = {
            setPieChartOptions: setPieChartOptions
        };
        return service;

        function setPieChartOptions() {
            return {
	            chart: {
	                type: 'pie',
	                style: {
	                    fontFamily: "Montserrat, 'Helvetica Neue', Helvetica, Arial, sans-serif"
	                }
	            },
	            title: {
	                text: ''
	            },
	            tooltip: {
	                headerFormat: '<span style="font-size: 14px"> {point.key} </span><br>',
	                pointFormat:  '<span style="font-size: 14px"> <b> ${point.y:.2f} </b> </span><br>'
	            },
	            plotOptions: {
	                pie: {
	                    allowPointSelect: true,
	                    cursor: 'pointer',
	                    dataLabels: {
	                        enabled: true,
	                        format: '<span style="font-size: 11px"> {point.name} </span><br> {point.percentage:.2f}%'
	                    }
	                }
	            },
	            series: [{
	                name: 'Categories',
	                data: []
	            }],
	            credits: {
	                enabled: false
	            }
	        };
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.service.draw', [])
        .factory('drawService', drawService);

    drawService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function drawService($http, store, $q, API_URL) {
        var url = API_URL + '/api/draws';
        var service = {
            create:       create,
            update:       update,
            remove:       remove,
            removeByFund: removeByFund
        };
        return service;

        function create(draw) {
            var data = {
                date:    draw.date,
                amount:  draw.amount,
                fund_id: store.get('fund').id
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function update(draw) {
            var data = {
                date:    draw.date,
                amount:  draw.amount,
                fund_id: store.get('fund').id
            };
            return $http.put(url + '/' + store.get('draw').id, data)
                .then(success)
                .catch(error);
        }

        function remove(drawId) {
            return $http.delete(url + '/' + drawId)
                .then(success)
                .catch(error);
        }

        function removeByFund(fund) {
            return $http.delete(url + query('fund_id', 'equals', fund.id))
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
        function query(name, op, val) {
            return '?q={"filters":[{"name":"' + name + '","op":"' + op + '","val":"' + val + '"}]}';
        }
    }
})();

/**
 * @ngdoc service
 * @name expenditureService
 * @description
 *
 * This is the service module for Expenditure.
**/
(function() {
    'use strict';

    angular
        .module('app.service.expenditure', [])
        .factory('expenditureService', expenditureService);

    expenditureService.$inject = ['$http', 'store', '$q', '$filter', 'API_URL'];

    function expenditureService($http, store, $q, $filter, API_URL) {
        var url = API_URL + '/api/expenditures';
        var service = {
            retrieveList:       retrieveList,
            create:             create,
            update:             update,
            remove:             remove,
            retrieveByCategory: retrieveByCategory,
            removeByCategory:   removeByCategory
        };
        return service;

        function retrieveList() {
            return $http.get(url + query('project_id', 'equals', store.get('project').id))
                .then(success)
                .catch(error);
        }

        function create(expenditure) {
            var data = {
                date:        $filter('date')(expenditure.date,'yyyy-MM-dd'),
                company:     expenditure.company,
                cost:        expenditure.cost,
                fund_id:     expenditure.fund.id,
                category_id: expenditure.item.category.id,
                item_id:     expenditure.item.id,
                project_id:  store.get('project').id
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function update(expenditure) {
            var data = {
                date:        $filter('date')(expenditure.date,'yyyy-MM-dd'),
                company:     expenditure.company,
                cost:        expenditure.cost,
                fund_id:     expenditure.fund.id,
                category_id: expenditure.item.category.id,
                item_id:     expenditure.item.id,
                project_id:  store.get('project').id
            };
            return $http.put(url + '/' + expenditure.id, data)
                .then(success)
                .catch(error);
        }

        function remove(expenditure) {
            return $http.delete(url + '/' + expenditure.id)
                .then(success)
                .catch(error);
        }

        function retrieveByCategory(category) {
			return $http.get(url + query('category_id', 'equals', category.id))
                .then(success)
                .catch(error);
        }

        function removeByCategory(category) {
            return $http.delete(url + query('category_id', 'equals', category.id))
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
        function query(name, op, val) {
            return '?q={"filters":[{"name":"' + name + '","op":"' + op + '","val":"' + val + '"}]}';
        }
    }
})();

/**
 * @ngdoc service
 * @name fundService
 * @description
 *
 * This is the service module for Fund.
**/
(function() {
    'use strict';

    angular
        .module('app.service.fund', [])
        .factory('fundService', fundService);

    fundService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function fundService($http, store, $q, API_URL) {
        var url = API_URL + '/api/funds';
        var service = {
            retrieveList: retrieveList,
            create:       create,
            update:       update,
            remove:       remove
        };
        return service;

        function retrieveList() {
			return $http.get(url + query('project_id', 'equals', store.get('project').id))
                .then(success)
                .catch(error);
        }

        function create(fund) {
            var data = {
                name:       fund.name,
                loan:       fund.loan,
                amount:     fund.amount,
                project_id: store.get('project').id
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function update(fund) {
            var data = {
                name:       fund.name,
                amount:     fund.amount,
                project_id: store.get('project').id
            };
            return $http.put(url + '/' + fund.id, data)
                .then(success)
                .catch(error);
        }

        function remove(fund) {
            return $http.delete(url + '/' + fund.id)
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
        function query(name, op, val) {
            return '?q={"filters":[{"name":"' + name + '","op":"' + op + '","val":"' + val + '"}]}';
        }
    }
})();

/**
 * @ngdoc service
 * @name itemService
 * @description
 *
 * This is the service module for Item.
**/
(function() {
    'use strict';

    angular
        .module('app.service.item', [])
        .factory('itemService', itemService);

    itemService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function itemService($http, store, $q, API_URL) {
        var url = API_URL + '/api/items';
        var service = {
            retrieveList:       retrieveList,
            create:             create,
            update:             update,
            remove:             remove,
            retrieveByCategory: retrieveByCategory,
            removeByCategory:   removeByCategory
        };
        return service;

        function retrieveList() {
            return $http.get(url + query('project_id', 'equals', store.get('project').id))
                .then(success)
                .catch(error);
        }

        function create(item) {
            var data = {
                name:        item.name,
                description: item.description,
                estimated:   item.estimated,
                actual:      item.actual,
                category_id: item.category,
                project_id:  store.get('project').id
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function update(item) {
            var data = {
                name:        item.name,
                description: item.description,
                estimated:   item.estimated,
                actual:      item.actual,
                category_id: item.category.id,
                project_id:  store.get('project').id
            };
            return $http.put(url + '/' + item.id, data)
                .then(success)
                .catch(error);
        }

        function remove(item) {
            return $http.delete(url + '/' + item.id)
                .then(success)
                .catch(error);
        }

        function retrieveByCategory(category) {
            return $http.get(url + query('category_id', 'equals', category.id))
                .then(success)
                .catch(error);
        }

        function removeByCategory(category) {
            return $http.delete(url + query('category_id', 'equals', category.id))
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
        function query(name, op, val) {
            return '?q={"filters":[{"name":"' + name + '","op":"' + op + '","val":"' + val + '"}]}';
        }
    }
})();

/**
 * @ngdoc service
 * @name projectService
 * @description
 *
 * This is the service module for Project.
**/
(function() {
    'use strict';

    angular
        .module('app.service.project', [])
        .factory('projectService', projectService);

    projectService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function projectService($http, store, $q, API_URL) {
        var url = API_URL + '/api/projects';
        var service = {
            retrieveList: retrieveList,
            create:       create,
            update:       update,
            remove:       remove
        };
        return service;

        function retrieveList() {
            return $http.get(url + query('user_id', 'equals', store.get('user').id))
                .then(success)
                .catch(error);
        }

        function create(project) {
            var data = {
                name:         project.name,
                address:      project.address,
                city:         project.city,
                state:        project.state,
                zipcode:      project.zipcode,
                home_sq:      project.homeSq,
                project_type: project.type,
                user_id:      store.get('user').id
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function update(project) {
            var data = {
                name:    project.name,
                address: project.address,
                city:    project.city,
                state:   project.state,
                zipcode: project.zipcode,
                home_sq: project.homeSq,
                user_id: store.get('user').id
            };
            return $http.put(url + '/' + project.id, data)
                .then(success)
                .catch(error);
        }

        function remove(project) {
            return $http.delete(url + '/' + project.id)
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
        function query(name, op, val) {
            return '?q={"filters":[{"name":"' + name + '","op":"' + op + '","val":"' + val + '"}]}';
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.service.stripe', [])
        .factory('stripeService', stripeService);

    stripeService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function stripeService($http, store, $q, API_URL) {
        var url = API_URL + '/api/stripe';
        var service = {
            validateCard:         validateCard,
            createCardToken:      createCardToken,
            createSubscription:   createSubscription,
            retrieveSubscription: retrieveSubscription,
            updateSubscription:   updateSubscription
        };
        return service;

        function validateCard(card) {
            var num = Stripe.card.validateCardNumber(card.cardNumber);
            var exp = Stripe.card.validateExpiry(card.expMonth, card.expYear);
            var cvc = Stripe.card.validateCVC(card.cvc);

            if (num && exp && cvc) {
                return true;
            }
            else {
                return false;
            }
        }

        function createCardToken(card) {
            var data = {
                number:    card.cardNumber,
                cvc:       card.cvc,
                exp_month: card.expMonth,
                exp_year:  card.expYear,
                name:      card.cardName.toUpperCase()
            };
            return $q(function(resolve, reject) {
                Stripe.card.createToken(data, responseCallback);

                function responseCallback(status, response) {
                    if (response.error) {
                        return reject(response);
                    } else {
                        return resolve(response);
                    }
                }
            });
        }

        function createSubscription(user, tokenId) {
            var data = {
                email:    user.email,
                username: user.username,
                password: user.password,
                plan:     user.plan,
                token_id: tokenId
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function retrieveSubscription() {
            return $http.get(url + '/' + store.get('user').stripe)
                .then(success)
                .catch(error);
        }

        function updateSubscription(tokenId) {
            var data = {
                stripe_id: store.get('user').stripe,
                token_id:  tokenId
            };
            return $http.put(url + '/' + store.get('user').stripe, data)
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
    }
})();

/**
 * @ngdoc service
 * @name subcontractorService
 * @description
 *
 * This is the service module for Subcontractor.
**/
(function() {
    'use strict';

    angular
        .module('app.service.subcontractor', [])
        .factory('subcontractorService', subcontractorService);

    subcontractorService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function subcontractorService($http, store, $q, API_URL) {
        var url = API_URL + '/api/subcontractors';
        var service = {
            retrieveList: retrieveList,
            create:       create,
            update:       update,
            remove:       remove
        };
        return service;

        function retrieveList() {
            return $http.get(url + query('project_id', 'equals', store.get('project').id))
                .then(success)
                .catch(error);
        }

        function create(subcontractor) {
            var data = {
                company:    subcontractor.company,
                person:     subcontractor.person,
                number:     subcontractor.number,
                project_id: store.get('project').id
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function update(subcontractor) {
            var data = {
                company:    subcontractor.company,
                person:     subcontractor.person,
                number:     subcontractor.number,
                project_id: store.get('project').id
            };
            return $http.put(url + '/' + subcontractor.id, data)
                .then(success)
                .catch(error);
        }

        function remove(subcontractor) {
            return $http.delete(url + '/' + subcontractor.id)
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
        function query(name, op, val) {
            return '?q={"filters":[{"name":"' + name + '","op":"' + op + '","val":"' + val + '"}]}';
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.service.user', [])
        .factory('userService', userService);

    userService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function userService($http, store, $q, API_URL) {
        var url = API_URL + '/api/users';
        var service = {
            retrieve:       retrieve,
            create:         create,
            updateUser:     updateUser,
            updatePassword: updatePassword
        };
        return service;

        function retrieve() {
            return $http.get(url + '/' + store.get('user').id)
                .then(success)
                .catch(error);
        }

        function create(user) {
            var data = {
                email:    user.email,
                username: user.username,
                password: user.password
            };
            return $http.post(url, data)
                .then(success)
                .catch(error);
        }

        function updateUser(user) {
            var data = {
                email:    user.email,
                username: user.username
            };
            return $http.put(url + '/' + store.get('user').id, data)
                .then(success)
                .catch(error);
        }

        function updatePassword(password) {
            return $http.put(url + '/' + store.get('user').id, { password: password })
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.service.utility', [])
        .factory('utilityService', utilityService);

    utilityService.$inject = ['$http', 'store', '$q', 'API_URL'];

    function utilityService($http, store, $q, API_URL) {
        var url = API_URL + '/api/utility';
        var service = {
            verifyEmail:       verifyEmail,
            verifyUsername:    verifyUsername,
            parseUbuilditFile: parseUbuilditFile
        };
        return service;

        function verifyEmail(email) {
            return $http.post(url + '/email', { email : email })
                .then(success)
                .catch(error);
        }

        function verifyUsername(username) {
            return $http.post(url + '/username', { username : username })
                .then(success)
                .catch(error);
        }

        function parseUbuilditFile(vm, file) {
            var data = new FormData();
            data.append('file', file);
            data.append('name', vm.name);
            data.append('address', vm.address);
            data.append('city', vm.city);
            data.append('state', vm.state);
            data.append('zipcode', vm.zipcode);
            data.append('home_sq', vm.homeSq);
            data.append('project_type', vm.type);
            data.append('user_id', store.get('user').id);

            var config = {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            };
            return $http.post(url + '/ubuildit', data, config)
                .then(success)
                .catch(error);
        }

        // Helpers
        function success(response) {
            return $q.resolve(response);
        }
        function error(response) {
            return $q.reject(response);
        }
    }
})();
